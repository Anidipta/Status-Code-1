import axios from 'axios';
import React, { useState, useRef, useEffect } from 'react';
import { setConfiguration, Row, Col } from 'react-grid-system';
import _ from 'lodash-es';
import { CloseOutlined, UnorderedListOutlined, SettingOutlined } from '@ant-design/icons';
import { animateScroll } from 'react-scroll';
import { WebSocket } from 'nextjs-websocket';

var getMessages = function getMessages(host, headers, chatId, messageCount, callback) {
  axios.get(host + "/chats/" + chatId + "/messages/latest/" + messageCount + "/", {
    headers: headers
  }).then(function (response) {
    // props.onGetMessages && props.onGetMessages(chatId, response.data)
    callback(chatId, response.data);
  })["catch"](function (error) {
    console.log('Fetch Latest Messages Error', error);
  });
};

var newMessage = function newMessage(host, headers, chatId, message, callback) {
  if (!chatId) return;
  var formdata = new FormData();

  if (message.attachments.length > 0) {
    for (var i = 0; i < message.attachments.length; i++) {
      formdata.append('attachments', message.attachments[i].blob, message.attachments[i].file);
    }
  }

  message.text !== null && formdata.append('text', message.text);
  formdata.append('created', message.created);
  formdata.append('sender_username', message.sender_username);
  formdata.append('custom_json', JSON.stringify({}));
  axios.post(host + "/chats/" + chatId + "/messages/", formdata, {
    headers: headers
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('New Message Error', error);
  });
};

var readMessage = function readMessage(host, headers, chatId, messageId, callback) {
  axios.patch(host + "/chats/" + chatId + "/people/", {
    last_read: messageId
  }, {
    headers: headers
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Read Message Error', error);
  });
};

var getChat = function getChat(host, headers, chatId, callback) {
  axios.get(host + "/chats/" + chatId + "/", {
    headers: headers
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Get Chat Error', error);
  });
};

var deleteChat = function deleteChat(host, headers, chatId, callback) {
  axios["delete"](host + "/chats/" + chatId + "/", {
    headers: headers
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Delete Chat Error', error);
  });
};

var getChatsBefore = function getChatsBefore(host, headers, before, chatCount, callback) {
  axios.put(host + "/chats/latest/" + chatCount + "/", {
    before: before
  }, {
    headers: headers
  }).then(function (response) {
    // props.onGetChats && props.onGetChats(response.data);
    callback(response.data);
  })["catch"](function (error) {
    console.log('Fetch Chats Before Error', error);
  });
};

var getOrCreateChat = function getOrCreateChat(host, headers, data, callback) {
  if (host === void 0) {
    host = 'https://api.chatengine.io';
  }

  axios.put(host + "/chats/", data, {
    headers: headers
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Get or Create Chat Error', error);
  });
};

var newChat = function newChat(host, headers, title, callback) {
  if (!title) return;
  axios.post(host + "/chats/", {
    title: title
  }, {
    headers: headers
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('New Chat Error', error);
  });
};

var getPeopleToInvite = function getPeopleToInvite(host, headers, chatId, callback) {
  axios.get(host + "/chats/" + chatId + "/others/", {
    headers: headers
  }).then(function (response) {
    // props.onGetOtherPeople && props.onGetOtherPeople(chatId, response.data)
    callback(response.data);
  })["catch"](function (error) {
    console.log('Fetch People to Invite Error', error);
  });
};

var invitePerson = function invitePerson(host, headers, chatId, username, callback) {
  axios.post(host + "/chats/" + chatId + "/people/", {
    username: username
  }, {
    headers: headers
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Invite Person Error', error);
  });
};

var removePerson = function removePerson(host, headers, chatId, username, callback) {
  axios.put(host + "/chats/" + chatId + "/people/", {
    username: username
  }, {
    headers: headers
  }).then(function (response) {
    callback && callback(response.data);
  })["catch"](function (error) {
    console.log('Remove Person Error', error);
  });
};

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var styles = {
  style: {
    position: 'relative',
    height: '100%'
  },
  chatListColumnStyle: {
    height: '100%',
    overflowY: 'scroll'
  },
  chatFeedColumnStyle: {
    height: '100%',
    overflowY: 'scroll',
    borderRight: '1px solid #afafaf',
    borderLeft: '1px solid #afafaf'
  },
  chatSettingsColumnStyle: {
    height: '100%',
    overflowY: 'scroll'
  },
  chatListMobileButtonStyle: {
    position: 'absolute',
    top: '12px',
    left: '12px'
  },
  chatSettingsMobileButtonStyle: {
    position: 'absolute',
    top: '12px',
    right: '12px'
  }
};

var styles$1 = {
  style: {
    width: '100%',
    height: '100%',
    maxHeight: '100vh',
    overflowY: 'scroll',
    overflowX: 'hidden',
    backgroundColor: 'white'
  },
  loadingMoreChatsStyle: {
    fontFamily: 'Avenir',
    textAlign: 'center',
    backgroundColor: '#e2e2e2',
    margin: '4px',
    paddingTop: '14px',
    paddingBottom: '14px',
    borderRadius: '4px'
  }
};

var styles$2 = {
  style: {
    position: 'relative',
    height: '64px',
    width: '100%',
    backgroundColor: 'white'
  },
  titleStyle: {
    // Position
    position: 'absolute',
    top: '16px',
    left: '14px',
    // Size
    fontSize: '26px',
    // Style
    fontFamily: 'Avenir',
    fontWeight: 600
  },
  inputStyle: {
    // Position
    position: 'absolute',
    top: '15px',
    left: '14px',
    // Size
    width: 'calc(100% - 28px)'
  },
  buttonStyle: {
    // Position
    position: 'absolute',
    top: '15px',
    right: '14px',
    // Style
    fontFamily: 'Avenir',
    fontWeight: 600
  }
};

var styles$3 = {
  style: {
    fontFamily: 'Avenir',
    color: '#1890ff',
    border: '1px solid #1890ff',
    outline: 'none',
    height: '36px',
    fontSize: '15px',
    cursor: 'pointer',
    padding: '8px 16px',
    borderRadius: '33px',
    backgroundColor: 'white',
    transition: 'all .44s ease',
    WebkitTransition: 'all .44s ease',
    MozTransition: 'all .44s ease'
  },
  hoveredStyle: {
    opacity: '0.73'
  }
};

var Button = function Button(props) {
  var _props$type = props.type,
      type = _props$type === void 0 ? 'default' : _props$type;

  var _useState = useState(false),
      hovered = _useState[0],
      setHovered = _useState[1];

  var getTypeStyle = function getTypeStyle() {
    if (type == 'primary') {
      return primaryStyle;
    } else if (type === 'danger') {
      return dangerStyle;
    } else {
      return {};
    }
  };

  var typeStyle = getTypeStyle();
  return React.createElement("button", {
    onClick: props.onClick,
    className: "ce-" + type + "-button " + props.className,
    onMouseEnter: function onMouseEnter() {
      return setHovered(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setHovered(false);
    },
    style: _extends({}, styles$3.style, typeStyle, hovered ? styles$3.hoveredStyle : {}, props.style, hovered ? props.hoveredStyle : {})
  }, props.children);
};
var primaryStyle = {
  color: 'white',
  border: 'none',
  backgroundColor: '#1890ff'
};
var dangerStyle = {
  color: '#f5222d',
  backgroundColor: 'white',
  border: '1px solid #f5222d'
};

var styles$4 = {
  style: {
    fontFamily: 'Avenir',
    height: '36px',
    fontSize: '15px',
    outline: 'none',
    borderRadius: '24px',
    border: '1px solid #d9d9d9',
    padding: '0px 12px',
    boxSizing: 'border-box',
    transition: 'all .33s ease',
    WebkitTransition: 'all .33s ease',
    MozTransition: 'all .33s ease'
  },
  focusStyle: {
    border: '1px solid #1890ff'
  }
};

var Input = function Input(props) {
  var didMountRef = useRef(false);

  var _useState = useState(''),
      currentValue = _useState[0],
      setCurrentValue = _useState[1];

  var _useState2 = useState(false),
      focused = _useState2[0],
      setFocused = _useState2[1];

  useEffect(function () {
    if (!didMountRef.current) {
      didMountRef.current = true;

      if (props.defaultValue) {
        var event = {
          target: {
            value: currentValue
          }
        };
        props.onChange && props.onChange(event);
        setCurrentValue(props.defaultValue);
      }
    }
  });
  return React.createElement("input", {
    autoFocus: props.autoFocus,
    className: "ce-input ce-text-input " + props.className,
    placeholder: props.label,
    value: typeof props.value === 'string' ? props.value : currentValue,
    onChange: function onChange(e) {
      setCurrentValue(e.target.value);
      props.onChange && props.onChange(e);
    },
    onFocus: function onFocus(e) {
      setFocused(true);
      props.onFocus && props.onFocus(e);
    },
    onBlur: function onBlur(e) {
      setFocused(false);
      props.onBlur && props.onBlur(e);
    },
    style: _extends({}, styles$4.style, focused ? styles$4.focusStyle : {}, props.style, focused ? props.focusStyle : {})
  });
};

var ChatForm = function ChatForm(props) {
  var _useState = useState(false),
      selected = _useState[0],
      setSelected = _useState[1];

  var _useState2 = useState(''),
      value = _useState2[0],
      setValue = _useState2[1];

  var onSubmit = function onSubmit(event) {
    event.preventDefault();
    props.onFormSubmit && props.onFormSubmit(value);
    setValue('');
  };

  var onChange = function onChange(event) {
    setValue(event.target.value);
  };

  if (props.renderChatForm) {
    return React.createElement(React.Fragment, null, props.renderChatForm(props));
  }

  return React.createElement("div", {
    className: "ce-chat-form",
    style: _extends({}, styles$2.style, props.style)
  }, React.createElement("span", {
    className: "ce-chat-form-title",
    style: _extends({}, styles$2.titleStyle, props.titleStyle)
  }, "My Chats"), React.createElement(Button, {
    style: _extends({}, styles$2.buttonStyle, props.buttonStyle),
    className: "ce-chat-form-button",
    onClick: function onClick() {
      return setSelected(true);
    }
  }, "+"), React.createElement("form", {
    className: "ce-chat-form-html-form",
    onSubmit: onSubmit
  }, React.createElement(Input, {
    autoFocus: true,
    value: value,
    label: "Chat Title",
    className: "ce-chat-form-input",
    style: _extends({}, styles$2.inputStyle, {
      visibility: selected ? 'visible' : 'hidden'
    }, props.inputStyle),
    onChange: onChange,
    onBlur: function onBlur() {
      return setSelected(false);
    }
  })));
};

var colors = ['#D64045', '#5B3000', '#00CC99', '#467599', '#1D3354', '#8F250C', '#6153CC', '#961D4E', '#A29F15', '#0CAADC', '#FF5154', '#FA7921', '#688E26', '#550527', '#A10702', '#FF1053', '#6C6EA0', '#100B00'];

var stringToNumber = function stringToNumber(str) {
  var sum = 0;

  for (var i = 0; i < str.length; i++) {
    sum += str.charCodeAt(i);
  }

  return sum;
};

var stringToColor = function stringToColor(str) {
  if (!str) {
    return 'black';
  } else {
    return colors[stringToNumber(str) % colors.length];
  }
};

var styles$5 = {
  style: {
    // Position
    position: 'relative',
    // Size
    width: '44px',
    height: '44px',
    // Style
    borderRadius: '50%',
    backgroundRepeat: 'no-repeat',
    backgroundPosition: 'center',
    backgroundSize: '48px',
    // Text Style
    color: 'white',
    textAlign: 'center',
    fontFamily: 'Avenir',
    fontSize: '15px',
    lineHeight: '44px',
    fontWeight: 600
  },
  statusStyle: {
    // Position
    position: 'absolute',
    top: '0px',
    right: '0px',
    // Style
    width: '8px',
    height: '8px',
    borderRadius: '100%',
    border: '2px solid white'
  }
};

var Avatar = function Avatar(props) {
  // Save Copy of URL to avoid flickering
  var _useState = useState(''),
      localAvatar = _useState[0],
      setLocalAvatar = _useState[1];

  var _props$username = props.username,
      username = _props$username === void 0 ? '' : _props$username,
      _props$avatarUrl = props.avatarUrl,
      avatarUrl = _props$avatarUrl === void 0 ? '' : _props$avatarUrl;
  var text = username ? username.substring(0, 2).toUpperCase() : '';
  var color = stringToColor(username);
  useEffect(function () {
    var newAvatar = avatarUrl !== null ? avatarUrl : '';

    if (newAvatar.split('?')[0] !== localAvatar.split('?')[0]) {
      setLocalAvatar(newAvatar);
    }
  });
  var avatarUrlStyle = {
    backgroundColor: localAvatar.length > 0 ? '#FFFFFF' : color,
    backgroundImage: localAvatar.length > 0 && "url(" + localAvatar + ")"
  };
  return React.createElement("div", {
    className: "ce-avatar " + props.className,
    onClick: props.onClick,
    style: _extends({}, styles$5.style, avatarUrlStyle, props.style)
  }, localAvatar.length === 0 && text, React.createElement("div", {
    className: "ce-avatar-status",
    style: _extends({}, styles$5.statusStyle, {
      display: props.isOnline === undefined ? 'none' : 'auto',
      backgroundColor: props.isOnline ? '#52c41a' : '#f5222d'
    }, props.statusStyle)
  }));
};

var styles$6 = {
  style: {
    position: 'relative',
    height: '76px',
    borderRadius: '12px',
    cursor: 'pointer',
    transition: 'all .44s ease',
    WebkitTransition: 'all .44s ease',
    MozTransition: 'all .44s ease'
  },
  hoveredStyle: {
    backgroundColor: '#f5f5f5',
    border: '0px solid white'
  },
  activeStyle: {
    backgroundColor: '#d9d9d9',
    border: '0px solid white'
  },
  avatarStyle: {
    position: 'absolute',
    top: '16px',
    left: '12px'
  },
  titleStyle: {
    // Position
    position: 'absolute',
    top: '12px',
    left: '68px',
    // Size
    width: 'calc(100% - 68px - 32px)',
    // Font
    fontWeight: 500,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    fontFamily: 'Avenir'
  },
  notificationStyle: {
    // Position
    position: 'absolute',
    top: 'calc(12px + 6px)',
    right: '12px',
    // Style
    width: '12px',
    height: '12px',
    borderRadius: '6px',
    backgroundColor: '#1890ff',
    "float": 'right'
  },
  subtitleStyle: {
    // Position
    position: 'absolute',
    bottom: '12px',
    left: '68px',
    // Size
    width: 'calc(70% - 68px)',
    // Style
    color: 'rgba(153, 153, 153, 1)',
    fontSize: '14px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    fontFamily: 'Avenir'
  },
  timeStampStyle: {
    // Position
    position: 'absolute',
    bottom: '12px',
    right: '12px',
    // Size
    width: '20%',
    // Style
    textAlign: 'right',
    color: 'rgba(153, 153, 153, 1)',
    fontSize: '14px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    fontFamily: 'Avenir'
  },
  loadingBarStyle: {
    borderRadius: '4px',
    backgroundColor: '#e2e2e2',
    color: '#e2e2e2'
  }
};

var ChatCard = function ChatCard(props) {
  var _props$title = props.title,
      title = _props$title === void 0 ? '' : _props$title,
      _props$description = props.description,
      description = _props$description === void 0 ? '' : _props$description,
      _props$timeStamp = props.timeStamp,
      timeStamp = _props$timeStamp === void 0 ? '' : _props$timeStamp;

  var _useState = useState(false),
      hovered = _useState[0],
      setHovered = _useState[1];

  var loadingBarStyle = props.isLoading ? _extends({}, styles$6.loadingBarStyle, props.loadingBarStyle) : {};
  var hasNotificationStyle = props.hasNotification ? {} : {
    display: 'none'
  };

  if (props.renderChatCard) {
    return React.createElement(React.Fragment, null, props.renderChatCard(props));
  }

  return React.createElement("div", {
    onClick: props.onClick,
    onMouseEnter: function onMouseEnter() {
      return setHovered(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setHovered(false);
    },
    style: _extends({}, styles$6.style, hovered ? styles$6.hoveredStyle : {}, props.isActive ? styles$6.activeStyle : {}, props.style, hovered ? props.hoveredStyle : {}, props.isActive ? props.activeStyle : {}),
    className: "\n        ce-chat-card \n        " + (props.isActive && 'ce-active-chat-card') + " \n        " + (hovered && 'ce-hovered-chat-card') + "\n      "
  }, props.renderAvatar ? props.renderAvatar(props) : React.createElement(Avatar, {
    username: props.avatarUsername,
    avatarUrl: props.avatarUrl,
    className: "ce-chat-card-avatar",
    style: _extends({}, styles$6.avatarStyle, {
      backgroundColor: props.isLoading ? '#e2e2e2' : stringToColor(props.avatarUsername)
    }, props.avatarStyle)
  }), React.createElement("div", {
    className: "ce-chat-card-title " + (props.isLoading && 'ce-chat-card-title-loading ce-chat-card-loading'),
    style: _extends({}, styles$6.titleStyle, loadingBarStyle, props.titleStyle),
    id: "ce-chat-card-title-" + title
  }, props.isLoading ? '.' : title), React.createElement("div", {
    className: "ce-chat-card-unread " + (props.isLoading && 'ce-chat-card-unread-loading ce-chat-card-loading'),
    style: _extends({}, styles$6.notificationStyle, hasNotificationStyle, loadingBarStyle, props.notificationStyle)
  }), React.createElement("div", {
    className: "ce-chat-card-subtitle " + (props.isLoading && 'ce-chat-card-subtitle-loading ce-chat-card-loading'),
    style: _extends({}, styles$6.subtitleStyle, loadingBarStyle, props.subtitleStyle)
  }, React.createElement("div", {
    className: "ce-chat-card-subtitle-html " + (props.isLoading && 'ce-chat-card-subtitle-html-loading ce-chat-card-loading'),
    dangerouslySetInnerHTML: {
      __html: props.isLoading ? '.' : description
    }
  }), React.createElement("style", null, "p {margin-block-start: 0px; margin-block-end: 0px;}")), React.createElement("div", {
    className: "ce-chat-card-time-stamp " + (props.isLoading && 'ce-chat-card-time-stamp-loading ce-chat-card-loading'),
    style: _extends({}, styles$6.timeStampStyle, loadingBarStyle, props.timeStampStyle)
  }, props.isLoading ? '.' : timeStamp));
};

var styles$7 = {
  style: {
    fontFamily: 'Avenir'
  }
};

var RenderTrigger = function RenderTrigger(props) {
  var _props$children = props.children,
      children = _props$children === void 0 ? 'Loading...' : _props$children;

  var useOnScreen = function useOnScreen(ref) {
    var _useState = useState(false),
        isIntersecting = _useState[0],
        setIntersecting = _useState[1];

    var observer = new IntersectionObserver(function (_ref) {
      var entry = _ref[0];
      setIntersecting(entry.isIntersecting);

      if (entry.isIntersecting) {
        props.onShow && props.onShow();
      } else {
        props.onHide && props.onHide();
      }
    });
    useEffect(function () {
      observer.observe(ref.current);
      return function () {
        return observer.disconnect();
      };
    }, []);
    return isIntersecting;
  };

  var ref = useRef(null);
  ref !== null && useOnScreen(ref);
  return React.createElement("div", {
    ref: ref,
    style: _extends({}, styles$7.style, props.style),
    className: "ce-chat-loader"
  }, children);
};

var getDateTime = function getDateTime(date, timezoneOffset) {
  if (timezoneOffset === void 0) {
    timezoneOffset = 0;
  }

  date = date.replace(/ /g, 'T');
  var year = date.substr(0, 4);
  var month = date.substr(5, 2);
  var day = date.substr(8, 2);
  var hour = date.substr(11, 2);
  var minute = date.substr(14, 2);
  var second = date.substr(17, 2);
  var d = new Date(year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second);
  d.setHours(d.getHours() + timezoneOffset);
  return d;
};
function formatTime(dateTime) {
  var time = dateTime.toLocaleString('en-US');
  return time.split(' ')[1].slice(0, -3) + ' ' + time.slice(-2);
}
function formatDateTime(dateTime) {
  return dateTime.toLocaleString('en-US');
}

var styles$8 = {
  style: {
    width: '1em',
    height: '1em'
  }
};

var Spinner = function Spinner(props) {
  return React.createElement("svg", {
    viewBox: "0 0 1024 1024",
    focusable: "false",
    "aria-hidden": "true",
    className: "ce-spinner",
    style: _extends({}, styles$8.style, props.style)
  }, React.createElement("path", {
    d: "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"
  }), React.createElement("style", null, "\n      .ce-spinner {\n        animation-name: spin;\n        animation-duration: 950ms;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear; \n      }\n      @keyframes spin {\n        from { transform:rotate(0deg); }\n        to { transform:rotate(360deg); }\n      }\n      "));
};

var readLastMessage = function readLastMessage(username, chat) {
  return chat.people.some(function (chatPerson) {
    return chatPerson.person.username === username && chatPerson.last_read === chat.last_message.id;
  });
};

var renderLoading = function renderLoading() {
  return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].map(function (_, i) {
    return React.createElement(ChatCard, {
      key: "chat_" + i,
      isLoading: true
    });
  });
};

var getDescription = function getDescription(chat) {
  if (!chat.last_message.id) {
    return 'Say hello!';
  }

  if (chat.last_message.text === null) {
    return chat.last_message.attachments.length + " attachments";
  }

  return chat.last_message.text;
};

var ChatList = function ChatList(props) {
  var _props$activeChatId = props.activeChatId,
      activeChatId = _props$activeChatId === void 0 ? -1 : _props$activeChatId;

  var renderChats = function renderChats(chats) {
    return chats.map(function (chat, index) {
      var _chat$last_message$se;

      var otherPerson = chat && chat.people.find(function (person) {
        return person.person.username !== props.username;
      });
      var title = !chat ? '' : chat.is_direct_chat && otherPerson ? otherPerson.person.username : chat.title;
      var timeStamp = getDateTime(chat.created, props.timezoneOffset).toString().substr(4, 6);
      var hasNotification = props.username ? !readLastMessage(props.username, chat) : false;
      return React.createElement(ChatCard, {
        key: "chat_" + index,
        chat: chat,
        title: title,
        description: getDescription(chat),
        timeStamp: timeStamp,
        isActive: activeChatId === chat.id,
        hasNotification: hasNotification,
        onClick: function onClick() {
          return props.onChatCardClick && props.onChatCardClick(chat.id);
        },
        avatarUsername: (_chat$last_message$se = chat.last_message.sender) == null ? void 0 : _chat$last_message$se.username,
        avatarUrl: chat.last_message.sender ? chat.last_message.sender.avatar : 'https://chat-engine-assets.s3.amazonaws.com/empty-chat-thumb.png',
        renderChatCard: props.renderChatCard
      });
    });
  };

  if (props.renderChatList) {
    return React.createElement(React.Fragment, null, props.renderChatList(props));
  }

  return React.createElement("div", {
    className: "ce-chat-list",
    style: _extends({}, styles$1.style, props.isLoading ? {
      overflowY: 'hidden'
    } : {}, props.style)
  }, React.createElement(ChatForm, {
    onFormSubmit: props.onChatFormSubmit,
    renderChatForm: props.renderChatForm
  }), props.isLoading ? renderLoading() : renderChats(props.chats), props.hasMoreChats && React.createElement(RenderTrigger, {
    onShow: props.onChatLoaderShow,
    style: _extends({}, styles$1.loadingMoreChatsStyle, props.loadingMoreChatsStyle),
    children: React.createElement(Spinner, null)
  }));
};

var styles$9 = {
  style: {
    height: '100%',
    position: 'relative',
    backgroundColor: 'white'
  },
  chatHeaderStyle: {},
  messageListStyle: {
    height: 'calc(100% - 85px - 48px)',
    overflowY: 'scroll',
    overflowX: 'hidden',
    position: 'relative',
    backgroundColor: 'white'
  },
  messageFormStyle: {
    width: '100%',
    position: 'absolute',
    bottom: '0px'
  }
};

var styles$a = {
  style: {
    width: '100%',
    zIndex: 1,
    backgroundColor: 'rgb(256, 256, 256, 0.92)',
    padding: '18px 0px',
    textAlign: 'center',
    color: 'rgb(24, 144, 255)',
    overflowX: 'hidden'
  },
  titleStyle: {
    width: '100%',
    fontFamily: 'Avenir',
    fontSize: '24px',
    fontWeight: 600
  },
  subtitleStyle: {
    width: '100%',
    fontFamily: 'Avenir',
    fontSize: '12px'
  },
  mobileOptionStyle: {
    width: '100%',
    top: '32px',
    textAlign: 'center',
    color: 'rgb(24, 144, 255)',
    overflow: 'hidden'
  }
};

setConfiguration({
  maxScreenClass: 'xl',
  gutterWidth: 0
});
var ChatHeader = function ChatHeader(props) {
  var _props$id = props.id,
      id = _props$id === void 0 ? '' : _props$id,
      _props$title = props.title,
      title = _props$title === void 0 ? '' : _props$title,
      _props$description = props.description,
      description = _props$description === void 0 ? '' : _props$description;

  if (props.renderChatHeader) {
    return React.createElement(React.Fragment, null, props.renderChatHeader(props));
  }

  return React.createElement(Row, {
    className: "ce-chat-header",
    style: _extends({}, styles$a.style, props.style)
  }, React.createElement(Col, {
    xs: 2,
    sm: 0,
    className: "ce-chat-header-mobile-option",
    style: _extends({}, styles$a.mobileOptionStyle, {
      left: '6px'
    }, props.mobileOptionStyle)
  }), React.createElement("div", {
    id: "ce-chat-feed-title-" + id,
    className: "ce-chat-header-title",
    style: _extends({}, styles$a.titleStyle, props.titleStyle)
  }, title), React.createElement("div", {
    className: "ce-chat-header-subtitle",
    style: _extends({}, styles$a.subtitleStyle, props.subtitleStyle)
  }, description), React.createElement(Col, {
    xs: 2,
    sm: 0,
    className: "ce-chat-header-mobile-option",
    style: _extends({}, styles$a.mobileOptionStyle, {
      right: '6px'
    }, props.mobileOptionStyle)
  }));
};

var styles$b = {
  style: {},
  messageStyle: {}
};

var theirStyles = {
  style: {
    width: '100%',
    position: 'relative'
  },
  senderUsernameStyle: {
    width: 'calc(100% - 64px)',
    fontFamily: 'Avenir',
    paddingLeft: '62px',
    paddingBottom: '2px',
    color: 'rgba(0, 0, 0, .40)',
    fontSize: '15px'
  },
  attachmentsStyle: {
    display: 'auto',
    paddingLeft: '48px',
    width: 'calc(100% - 48px)'
  },
  bodyStyle: {
    position: 'relative',
    width: 'calc(100% - 2px)'
  },
  timeTagStyle: {
    marginLeft: '4px',
    fontSize: '14px',
    fontFamily: 'Avenir',
    color: 'rgba(0, 0, 0, 0.4)',
    // CSS Transitions
    transition: 'all .15s ease',
    WebkitTransition: 'all .15s ease',
    MozTransition: 'all .15s ease'
  },
  bubbleStyle: {
    cursor: 'pointer',
    display: 'inline-block',
    color: 'black',
    padding: '12px',
    marginLeft: '48px',
    fontSize: '15px',
    fontFamily: 'Avenir',
    whiteSpace: 'pre-line',
    backgroundColor: '#f1f0f0',
    overflowWrap: 'anywhere',
    maxWidth: 'calc(100% - 100px - 48px)',
    // CSS Transitions
    transition: 'all .33s ease',
    WebkitTransition: 'all .33s ease',
    MozTransition: 'all .33s ease'
  },
  readsStyle: {
    marginLeft: '48px',
    width: 'calc(100% - 50px)'
  },
  readStyle: {
    marginLeft: '4px',
    "float": 'left'
  },
  avatarStyle: {
    position: 'absolute',
    bottom: '0px',
    left: '2px'
  }
};
var myStyles = {
  style: {
    width: '100%',
    textAlign: 'right'
  },
  senderUsernameStyle: {
    display: 'none'
  },
  attachmentsStyle: {
    display: 'auto',
    marginLeft: '48px',
    width: 'calc(100% - 48px)'
  },
  bodyStyle: {
    position: 'relative',
    width: 'calc(100% - 2px)'
  },
  timeTagStyle: {
    marginRight: '4px',
    fontSize: '14px',
    fontFamily: 'Avenir',
    color: 'rgb(24, 144, 255)',
    // CSS Transitions
    transition: 'all .15s ease',
    WebkitTransition: 'all .15s ease',
    MozTransition: 'all .15s ease'
  },
  bubbleStyle: {
    color: 'white',
    display: 'inline-block',
    backgroundColor: '#1890ff',
    cursor: 'pointer',
    textAlign: 'left',
    // Stay right but render text
    padding: '12px',
    fontSize: '15px',
    fontFamily: 'Avenir',
    whiteSpace: 'pre-line',
    overflowWrap: 'anywhere',
    maxWidth: 'calc(100% - 100px)',
    // CSS Transitions
    transition: 'all .33s ease',
    WebkitTransition: 'all .33s ease',
    MozTransition: 'all .33s ease'
  },
  readsStyle: {
    width: '100%'
  },
  readStyle: {
    "float": 'right',
    marginLeft: '4px'
  },
  avatarStyle: {
    display: 'none'
  }
};

var styles$c = {
  style: {
    borderRadius: '13px',
    textAlign: 'center',
    backgroundRepeat: 'no-repeat',
    backgroundPosition: 'center',
    backgroundSize: '14px',
    // CSS Transitions
    transition: 'all .33s ease',
    WebkitTransition: 'all .33s ease',
    MozTransition: 'all .33s ease'
  }
};

var Dot = function Dot(props) {
  var _useState = useState(''),
      localAvatar = _useState[0],
      setLocalAvatar = _useState[1];

  var _props$username = props.username,
      username = _props$username === void 0 ? '' : _props$username,
      _props$isVisible = props.isVisible,
      isVisible = _props$isVisible === void 0 ? true : _props$isVisible,
      _props$avatarUrl = props.avatarUrl,
      avatarUrl = _props$avatarUrl === void 0 ? '' : _props$avatarUrl;
  var color = stringToColor(username);
  useEffect(function () {
    var newAvatar = avatarUrl !== null ? avatarUrl : '';

    if (newAvatar.split('?')[0] !== localAvatar.split('?')[0]) {
      setLocalAvatar(newAvatar);
    }
  });
  return React.createElement("div", {
    className: "ce-avatar-dot",
    style: _extends({}, styles$c.style, {
      backgroundColor: localAvatar.length > 0 ? 'white' : color,
      backgroundImage: localAvatar.length > 0 ? "url(" + localAvatar + ")" : '',
      width: isVisible ? '13px' : '0px',
      height: isVisible ? '13px' : '0px'
    }, props.style)
  });
};

var styles$d = {
  style: {
    width: '100%',
    fontFamily: 'Avenir',
    textAlign: 'center',
    paddingTop: '4px',
    paddingBottom: '10px',
    fontSize: '15px',
    color: 'rgba(0, 0, 0, .40)'
  }
};

var DateTime = function DateTime(props) {
  var _props$offset = props.offset,
      offset = _props$offset === void 0 ? 0 : _props$offset;
  return React.createElement("div", {
    className: "ce-message-date-text",
    style: _extends({}, styles$d.style, props.style)
  }, formatDateTime(getDateTime(props.created, offset)));
};

var styles$e = {
  style: {
    cursor: 'pointer',
    fontFamily: 'Avenir',
    padding: '12px',
    borderRadius: '14px',
    display: 'inline-block',
    marginRight: '2px',
    marginBottom: '4px',
    color: '#434343',
    backgroundColor: 'white',
    border: '1px solid #434343',
    transition: 'all .33s ease',
    WebkitTransition: 'all .33s ease',
    MozTransition: 'all .33s ease'
  },
  hoveredStyle: {
    border: '1px solid #1890ff'
  }
};

var images = ['jpg', 'jpeg', 'png', 'gif', 'tiff'];
var isImage = function isImage(fileName) {
  var dotSplit = fileName.split('.');
  return dotSplit.length > 0 && images.indexOf(dotSplit[dotSplit.length - 1].toLowerCase()) !== -1;
};
var getFileName = function getFileName(fileUrl) {
  var slashSplit = fileUrl.split('/');
  var nameAndHash = slashSplit[slashSplit.length - 1];
  return nameAndHash.split('?')[0];
};

var urlOrLoading = function urlOrLoading(url) {
  return url ? getFileName(url) : 'Loading...';
};

var File = function File(props) {
  var _useState = useState(false),
      isHovered = _useState[0],
      setIsHovered = _useState[1];

  return React.createElement("div", {
    onMouseEnter: function onMouseEnter() {
      return setIsHovered(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setIsHovered(false);
    },
    onClick: function onClick() {
      return props.url && typeof window !== 'undefined' && window.open(props.url);
    },
    style: _extends({}, styles$e.style, !props.url ? {
      border: '1px solid grey'
    } : {}, isHovered ? styles$e.hoveredStyle : {}, props.style, isHovered ? props.hoveredStyle : {}),
    className: "ce-file " + props.className
  }, props.fileName ? props.fileName : "\uD83D\uDCC4 " + urlOrLoading(props.url));
};

var styles$f = {
  style: {
    cursor: 'pointer',
    height: '30vw',
    width: '30vw',
    maxHeight: '200px',
    maxWidth: '200px',
    minHeight: '100px',
    minWidth: '100px',
    padding: '2px',
    objectFit: 'cover',
    borderRadius: '0.3em',
    backgroundColor: 'white',
    border: '1px solid #434343',
    transition: 'all .33s ease',
    WebkitTransition: 'all .33s ease',
    MozTransition: 'all .33s ease'
  },
  hoveredStyle: {
    border: '1px solid #1890ff'
  }
};

var Image = function Image(props) {
  var url = props.url;

  var _useState = useState(false),
      isHovered = _useState[0],
      setIsHovered = _useState[1];

  var loadingUrl = 'https://chat-engine-assets.s3.amazonaws.com/loading.gif';
  return React.createElement("img", {
    onMouseEnter: function onMouseEnter() {
      return setIsHovered(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setIsHovered(false);
    },
    src: url ? url : loadingUrl,
    alt: url ? url : loadingUrl,
    onClick: function onClick() {
      return url && typeof window !== 'undefined' && window.open(url);
    },
    style: _extends({}, styles$f.style, isHovered ? styles$f.hoveredStyle : {}, props.style, isHovered ? props.hoveredStyle : {}),
    className: "ce-image " + props.className
  });
};

var Message = function Message(props) {
  var _props$lastMessage = props.lastMessage,
      lastMessage = _props$lastMessage === void 0 ? null : _props$lastMessage,
      message = props.message,
      _props$nextMessage = props.nextMessage,
      nextMessage = _props$nextMessage === void 0 ? null : _props$nextMessage,
      _props$chat = props.chat,
      chat = _props$chat === void 0 ? null : _props$chat,
      _props$isSending = props.isSending,
      isSending = _props$isSending === void 0 ? false : _props$isSending,
      _props$isMyMessage = props.isMyMessage,
      isMyMessage = _props$isMyMessage === void 0 ? false : _props$isMyMessage,
      _props$showDateTime = props.showDateTime,
      showDateTime = _props$showDateTime === void 0 ? false : _props$showDateTime;

  var _useState = useState(false),
      hovered = _useState[0],
      setHovered = _useState[1];

  var styles = isMyMessage ? myStyles : theirStyles;
  var topRadius = !lastMessage || lastMessage.sender_username !== message.sender_username ? '1.3em' : '0.3em';
  var bottomRadius = !nextMessage || nextMessage.sender_username !== message.sender_username ? '1.3em' : '0.3em';
  var borderStyle = {
    borderRadius: isMyMessage ? "1.3em " + topRadius + " " + bottomRadius + " 1.3em" : topRadius + " 1.3em 1.3em " + bottomRadius
  };
  var sendingStyle = isSending ? {
    backgroundColor: '#40a9ff'
  } : {};
  var isLastMessage = !nextMessage || nextMessage.sender_username !== message.sender_username;
  var paddingBottom = !nextMessage || nextMessage.sender_username !== message.sender_username ? '12px' : '2px';
  var text = message.text !== null ? message.text.replace(/<a /g, "<a style=\"color: 'white';\" ") : '';

  var renderAttachments = function renderAttachments(renderImage) {
    var attachments = message && message.attachments ? message.attachments : [];
    return attachments.map(function (attachment, index) {
      var fileName = getFileName(attachment.file);

      if (renderImage && isImage(fileName)) {
        return React.createElement(Image, {
          key: "attachment_" + index,
          url: attachment.file !== null && !props.isSending ? attachment.file : undefined,
          style: _extends({}, styles.attachmentsImageStyle, props.attachmentsImageStyle),
          className: "ce-message-image"
        });
      } else if (!renderImage && !isImage(fileName)) {
        return React.createElement(File, {
          key: "attachment_" + index,
          url: attachment.file !== null && !props.isSending ? attachment.file : undefined,
          style: _extends({}, styles.attachmentsFileStyle, props.attachmentsFileStyle),
          className: "ce-message-file"
        });
      } else {
        return React.createElement("div", {
          key: "attachment_" + index
        });
      }
    });
  };

  var renderReads = function renderReads() {
    var chatPeople = chat !== null ? chat.people : [];
    return chatPeople.map(function (chatPerson, index) {
      return React.createElement(Dot, {
        key: "read_" + index,
        avatarUrl: chatPerson.person.avatar,
        username: chatPerson.person.username,
        isVisible: message.id === chatPerson.last_read,
        style: _extends({}, styles.readStyle, props.readStyle)
      });
    });
  };

  if (props.renderMessage) {
    return React.createElement(React.Fragment, null, props.renderMessage(props));
  }

  return React.createElement("div", {
    className: "ce-" + (isMyMessage ? 'my' : 'their') + "-message",
    style: _extends({}, styles.style, {
      paddingBottom: paddingBottom
    }, props.style)
  }, showDateTime && React.createElement(DateTime, {
    created: message.created,
    style: _extends({}, styles.dateTimeStyle, props.dateTimeStyle)
  }), (lastMessage === null || lastMessage.sender_username !== message.sender_username) && React.createElement("div", {
    style: _extends({}, styles.senderUsernameStyle, props.senderUsernameStyle),
    className: "ce-" + (isMyMessage ? 'my' : 'their') + "-message-sender-username"
  }, message.sender_username), React.createElement("div", {
    style: _extends({}, styles.attachmentsStyle, props.attachmentsStyle),
    className: "\n          ce-" + (isMyMessage ? 'my' : 'their') + "-message-attachments \n          ce-" + (isMyMessage ? 'my' : 'their') + "-message-images\n        "
  }, renderAttachments(true)), React.createElement("div", {
    style: _extends({}, styles.attachmentsStyle, props.attachmentsStyle),
    className: "\n            ce-" + (isMyMessage ? 'my' : 'their') + "-message-attachments \n            ce-" + (isMyMessage ? 'my' : 'their') + "-message-files\n          "
  }, renderAttachments(false)), message.text !== null && React.createElement("div", {
    onMouseEnter: function onMouseEnter() {
      return setHovered(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setHovered(false);
    },
    style: _extends({}, styles.bodyStyle, props.bodyStyle)
  }, isMyMessage && React.createElement("span", {
    className: "ce-my-message-timestamp",
    style: _extends({}, styles.timeTagStyle, {
      opacity: hovered ? '1' : '0'
    }, props.timeTagStyle)
  }, formatTime(getDateTime(message.created, props.timezoneOffset))), React.createElement("div", {
    className: "\n              ce-" + (isMyMessage ? 'my' : 'their') + "-message-body\n              " + (isSending && 'ce-my-message-sending-body') + "\n            ",
    style: _extends({}, styles.bubbleStyle, borderStyle, sendingStyle, props.bubbleStyle),
    dangerouslySetInnerHTML: {
      __html: text
    }
  }), React.createElement("style", null, "p {margin-block-start: 0px; margin-block-end: 0px;}"), !isMyMessage && React.createElement("span", {
    className: "ce-their-message-timestamp",
    style: _extends({}, styles.timeTagStyle, {
      opacity: hovered ? '1' : '0'
    }, props.timeTagStyle)
  }, formatTime(getDateTime(message.created, props.timezoneOffset))), React.createElement(Avatar, {
    username: message.sender_username,
    style: _extends({}, styles.avatarStyle, isLastMessage ? {} : {
      display: 'none'
    }, props.avatarStyle),
    avatarUrl: message.sender && message.sender !== null && message.sender.avatar !== null ? message.sender.avatar : undefined
  })), React.createElement("div", {
    style: _extends({}, styles.readsStyle, props.readsStyle),
    className: "ce-" + (isMyMessage ? 'my' : 'their') + "-reads-row"
  }, renderReads()));
};

var MessageList = function MessageList(props) {
  var _props$chat, _props$chat2;

  var _props$messages = props.messages,
      messages = _props$messages === void 0 ? [] : _props$messages;

  var messagesObject = _.mapKeys(messages, 'created');

  var keys = Object.keys(messagesObject).sort();

  var date = function date(_date) {
    return _date ? _date.substr(0, 10) : null;
  };

  var renderMessages = function renderMessages(keys) {
    return keys.map(function (key, index) {
      var message = messagesObject[key];
      var lastKey = index === 0 ? '' : keys[index - 1];
      var nextKey = index === keys.length - 1 ? '' : keys[index + 1];
      var lastDate = lastKey !== '' ? date(lastKey) : undefined;
      var thisDate = key !== '' ? date(key) : undefined;
      var showDateTime = !lastDate || lastDate !== thisDate;
      var isMyMessage = props.username === message.sender_username;
      return React.createElement("div", {
        key: "message_" + index,
        id: "ce-message-" + message.id
      }, index === keys.length - 1 && React.createElement(RenderTrigger, {
        onShow: props.onBottomMessageShow,
        onHide: props.onBottomMessageHide,
        children: ""
      }), React.createElement(Message, {
        chat: props.chat,
        message: message,
        lastMessage: messagesObject[lastKey],
        nextMessage: messagesObject[nextKey],
        timezoneOffset: props.timezoneOffset,
        isMyMessage: isMyMessage,
        isSending: !message.id,
        showDateTime: showDateTime,
        renderMessage: props.renderMessage,
        style: _extends({}, styles$b.messageStyle, props.messageStyle)
      }));
    });
  };

  if (props.renderMessageList) {
    return React.createElement(React.Fragment, null, props.renderMessageList(props));
  }

  return (// Used for scrolling
    React.createElement("div", {
      className: "ce-message-list",
      id: "ce-message-list-" + ((_props$chat = props.chat) == null ? void 0 : _props$chat.id),
      style: _extends({}, styles$b.style, props.style)
    }, React.createElement("div", {
      className: "ce-message-list-content",
      id: "ce-message-list-content-" + ((_props$chat2 = props.chat) == null ? void 0 : _props$chat2.id)
    }, props.hasMoreMessages && React.createElement(RenderTrigger, {
      onShow: props.onMessageLoaderShow,
      onHide: props.onMessageLoaderHide,
      children: React.createElement(Spinner, {
        style: {
          position: 'relative',
          left: 'calc(50% - 0.625em)',
          width: '1.25em',
          height: '1.25em',
          font: 'red'
        }
      })
    }), renderMessages(keys)))
  );
};

var styles$g = {
  style: {
    paddingTop: '4px'
  },
  inputStyle: {
    border: '1px solid white',
    width: 'calc(100% - 24px - 116px)',
    outline: 'none',
    fontSize: '15px',
    fontFamily: 'Avenir',
    paddingLeft: '12px',
    paddingRight: '12px',
    resize: 'none',
    overflowX: 'hidden',
    // Tweak Position
    position: 'relative',
    top: '6px'
  },
  sendButtonStyle: {
    cursor: 'pointer',
    fontFamily: 'Avenir',
    display: 'inline-block',
    borderRadius: '8px',
    padding: '6px 12px',
    color: 'white',
    transition: 'all .33s ease',
    WebkitTransition: 'all .33s ease',
    MozTransition: 'all .33s ease',
    // Tweak Position
    position: 'relative',
    bottom: '6px'
  },
  draftAttachmentStyle: {
    padding: '6px',
    display: 'inline-block',
    position: 'relative'
  },
  draftAttachmentRemoveStyle: {
    position: 'absolute',
    top: '-6px',
    right: '-6px',
    width: '30px',
    height: '30px',
    color: '#40a9ff',
    backgroundColor: 'white',
    border: '1px solid rgb(67, 67, 67)',
    borderRadius: '50%',
    cursor: 'pointer',
    transition: 'all .33s ease',
    WebkitTransition: 'all .33s ease',
    MozTransition: 'all .33s ease'
  },
  draftImageStyle: {
    padding: '6px',
    height: '60px',
    width: '60px'
  },
  draftFileStyle: {}
};

var styles$h = {
  style: {
    height: '0px',
    display: 'inline',
    padding: '6px 12px',
    position: 'relative',
    bottom: '6px'
  },
  iconStyle: {
    backgroundColor: 'white',
    border: '1px solid white',
    cursor: 'pointer'
  }
};

var AttachmentInput = function AttachmentInput(props) {
  var _useState = useState(false),
      hovered = _useState[0],
      setHovered = _useState[1];

  var hoverStyle = {
    color: hovered ? '#06c' : '#444'
  };

  var onSelect = function onSelect(e) {
    e.preventDefault();
    var target = e.target;
    var files = target.files;
    props.onSelectFiles && props.onSelectFiles(files);
  };

  return React.createElement("form", {
    className: "ce-attachment-input",
    encType: "multipart/form-data",
    style: _extends({}, styles$h.style, props.style)
  }, React.createElement("label", {
    htmlFor: "files",
    id: "ce-upload-document-button"
  }, React.createElement("span", {
    className: "ce-attachment-icon",
    onMouseEnter: function onMouseEnter() {
      return setHovered(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setHovered(false);
    },
    style: _extends({}, styles$h.iconStyle, hoverStyle, props.iconStyle),
    onClick: function onClick() {}
  }, "\uD83D\uDCCE")), React.createElement("input", {
    multiple: true,
    id: "files",
    style: {
      visibility: 'hidden',
      height: '0px',
      width: '0px'
    },
    type: "file",
    onChange: onSelect
  }));
};

var MessageForm = function MessageForm(props) {
  var _props$label = props.label,
      label = _props$label === void 0 ? '' : _props$label;

  var _useState = useState(0),
      iter = _useState[0],
      setIter = _useState[1]; // Forces attachments update


  var _useState2 = useState(''),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = useState(0),
      height = _useState3[0],
      setHeight = _useState3[1];

  var _useState4 = useState(false),
      buttonHover = _useState4[0],
      setButtonHover = _useState4[1];

  var _useState5 = useState([]),
      attachments = _useState5[0],
      setAttachments = _useState5[1];

  useEffect(function () {
    return resize();
  }, []);

  var resize = function resize() {
    var textarea = document.getElementById('msg-textarea');

    if (textarea !== null) {
      textarea.style.height = '';
      textarea.style.height = Math.min(textarea.scrollHeight, 150) + 'px';
      setHeight(Math.min(textarea.scrollHeight, 150));
    }
  };

  var onChange = function onChange(e) {
    setValue(e.target.value);
    props.onChange && props.onChange(e);
    resize();
  };

  var onSubmit = function onSubmit() {
    var created = new Date().toISOString().replace('T', ' ').replace('Z', Math.floor(Math.random() * 1000) + "+00:00");
    var localAttachments = attachments.map(function (attachment) {
      return {
        id: -1,
        created: new Date().toString(),
        file: attachment.name,
        blob: attachment
      };
    });
    var message = {
      attachments: localAttachments,
      text: value,
      sender_username: props.username ? props.username : '',
      custom_json: {},
      created: created
    };
    props.onSubmit && props.onSubmit(message);
    setValue('');
    setAttachments([]);
    resize();
  };

  var onKeyDown = function onKeyDown(e) {
    if (e.key === 'Enter') {
      e.preventDefault();

      if (value.length > 0) {
        onSubmit();
      }
    }
  };

  var onRemove = function onRemove(index) {
    if (attachments && attachments !== null) {
      var newAttachments = attachments;
      newAttachments.splice(index, 1);
      setAttachments(newAttachments);
      setIter(iter + 1);
    }
  };

  var renderAttachments = function renderAttachments(renderImage) {
    if (!attachments || attachments === null) return React.createElement("div", null);
    return Array.from(attachments).map(function (attachment, index) {
      var url = URL.createObjectURL(attachment);
      return React.createElement("span", {
        key: "draft-" + index,
        className: "ce-draft-attachment-wrapper",
        style: _extends({}, styles$g.draftAttachmentStyle, props.draftAttachmentStyle)
      }, renderImage && isImage(attachment.name) && React.createElement(Image, {
        url: url,
        style: _extends({}, styles$g.draftImageStyle, props.draftImageStyle),
        className: "ce-draft-image"
      }), !renderImage && !isImage(attachment.name) && React.createElement(File, {
        url: url,
        fileName: "\uD83D\uDCC4 " + attachment.name,
        style: _extends({}, styles$g.draftFileStyle, props.draftFileStyle),
        className: "ce-draft-file"
      }), (!renderImage && !isImage(attachment.name) || renderImage && isImage(attachment.name)) && React.createElement("button", {
        className: "ce-message-attachment-remove-btn",
        onClick: function onClick() {
          return onRemove(index);
        },
        style: _extends({}, styles$g.draftAttachmentRemoveStyle, props.draftAttachmentRemoveStyle)
      }, "\u274C"));
    });
  };

  if (props.renderMessageForm) {
    return React.createElement(React.Fragment, null, props.renderMessageForm(props));
  }

  return React.createElement("div", {
    id: "ce-message-form",
    style: _extends({}, styles$g.style, props.style),
    className: "ce-message-form"
  }, React.createElement("div", {
    className: "ce-message-form-attachments-row"
  }, renderAttachments(true)), React.createElement("div", {
    className: "ce-message-form-attachments-row"
  }, renderAttachments(false)), React.createElement("textarea", {
    id: "msg-textarea",
    className: "ce-message-form-input",
    value: value,
    placeholder: label,
    rows: 1,
    onKeyDown: onKeyDown,
    onChange: onChange,
    style: _extends({}, styles$g.inputStyle, {
      overflowY: height === 150 ? 'scroll' : 'hidden'
    }, props.inputStyle)
  }), React.createElement(AttachmentInput, {
    onSelectFiles: function onSelectFiles(files) {
      files !== null && setAttachments(Array.from(files));
    },
    style: _extends({}, styles$g.attachmentInputStyle, props.attachmentInputStyle),
    iconStyle: _extends({}, styles$g.attachmentInputIconStyle, props.attachmentInputIconStyle)
  }), React.createElement("div", {
    id: "ce-send-message-button",
    onMouseEnter: function onMouseEnter() {
      return setButtonHover(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setButtonHover(false);
    },
    onClick: onSubmit,
    style: _extends({}, styles$g.sendButtonStyle, {
      backgroundColor: buttonHover ? '#40a9ff' : '#1890ff'
    }, props.sendButtonStyle)
  }, "Send"));
};

var styles$i = {
  style: {
    width: '100%',
    textAlign: 'center'
  },
  gifStyle: {
    width: '50%',
    maxWidth: '200px'
  },
  textStyle: {
    color: '#afafaf',
    fontWeight: 600,
    fontSize: '14px',
    fontFamily: 'Avenir'
  }
};

var WelcomeGif = function WelcomeGif(props) {
  if (props.renderWelcomeGif) {
    return React.createElement(React.Fragment, null, props.renderWelcomeGif(props));
  }

  return React.createElement("div", {
    className: "ce-ice-breaker-wrapper",
    style: _extends({}, styles$i.style, props.style)
  }, React.createElement("img", {
    className: "ce-ice-breaker-gif",
    style: _extends({}, styles$i.gifStyle, props.gifStyle),
    src: "https://chat-engine-assets.s3.amazonaws.com/welcome_gifs/peace.gif",
    alt: "chat-engine-ice-breaker"
  }), React.createElement("div", {
    className: "ce-ice-breaker-text",
    style: _extends({}, styles$i.textStyle, props.textStyle)
  }, "No messages here yet..."));
};

var getDescription$1 = function getDescription(chat, timezoneOffset) {
  if (timezoneOffset === void 0) {
    timezoneOffset = 0;
  }

  if (!chat) {
    return '⬅️ ⬅️ ⬅️';
  } else if (chat.last_message.created && chat.last_message.created.length > 0) {
    var dateTime = getDateTime(chat.last_message.created, timezoneOffset);
    var formattedDateTime = formatDateTime(dateTime);
    return "Active " + formattedDateTime;
  } else {
    return 'Say hello!';
  }
};

var ChatFeed = function ChatFeed(props) {
  var chat = props.chat;
  var otherPerson = chat && chat.people.find(function (person) {
    return person.person.username !== props.username;
  });
  var title = props.isLoading ? React.createElement(Spinner, null) : !chat ? 'Create a chat!' : chat.is_direct_chat && otherPerson ? otherPerson.person.username : chat.title;

  if (props.renderChatFeed) {
    return React.createElement(React.Fragment, null, props.renderChatFeed(props));
  }

  return React.createElement("div", {
    className: "ce-chat-feed",
    style: _extends({}, styles$9.style, props.style)
  }, React.createElement(ChatHeader, {
    title: title,
    description: props.isLoading ? 'Loading...' : getDescription$1(chat, props.timezoneOffset),
    renderChatHeader: props.renderChatHeader,
    style: _extends({}, styles$9.chatHeaderStyle, props.chatHeaderStyle)
  }), React.createElement(MessageList, {
    chat: chat,
    messages: props.messages,
    username: props.username,
    timezoneOffset: props.timezoneOffset,
    hasMoreMessages: props.hasMoreMessages,
    onMessageLoaderShow: props.onMessageLoaderShow,
    onMessageLoaderHide: props.onMessageLoaderHide,
    onBottomMessageShow: props.onBottomMessageShow,
    onBottomMessageHide: props.onBottomMessageHide,
    renderMessageList: props.renderMessageList,
    renderMessage: props.renderMessage,
    style: _extends({}, styles$9.messageListStyle, props.messageListStyle)
  }), props.messages.length === 0 && !props.isLoading && React.createElement(WelcomeGif, {
    style: {
      position: 'absolute',
      top: 'calc(50% - 112px)'
    }
  }), React.createElement(MessageForm, {
    label: "Send a message...",
    username: props.username,
    onSubmit: props.onMessageFormSubmit,
    renderMessageForm: props.renderMessageForm,
    style: _extends({}, styles$9.messageFormStyle, props.messageFormStyle)
  }));
};

var styles$j = {
  style: {
    backgroundColor: 'white',
    width: '100%',
    height: '100%'
  },
  chatTitleStyle: {
    width: '100%',
    textAlign: 'center',
    fontFamily: 'Avenir',
    fontSize: '18px',
    fontWeight: 600
  }
};

var styles$k = {
  style: {
    width: '100%',
    paddingTop: '12px',
    height: 'calc(44px + 14px)'
  },
  oneAvatarStyle: {
    avatarOne: {
      "float": 'left',
      position: 'relative',
      left: 'calc(50% - 22px)'
    }
  },
  twoAvatarsStyle: {
    avatarOne: {
      "float": 'left',
      position: 'relative',
      left: 'calc(50% - 22px - 15px)'
    },
    avatarTwo: {
      "float": 'left',
      position: 'relative',
      left: 'calc(50% - 44px - 22px + 15px)'
    }
  },
  threeAvatarsStyle: {
    avatarOne: {
      "float": 'left',
      position: 'relative',
      left: 'calc(50% - 22px - 24px)'
    },
    avatarTwo: {
      "float": 'left',
      position: 'relative',
      left: 'calc(50% - 24px - 44px)'
    },
    avatarThree: {
      "float": 'left',
      position: 'relative',
      left: 'calc(50% - 22px - 44px - 44px + 24px)'
    }
  }
};

var ChatAvatars = function ChatAvatars(props) {
  var _props$users = props.users,
      users = _props$users === void 0 ? [] : _props$users;

  var getStyle = function getStyle(people, styles) {
    if (people.length === 1) {
      return styles.oneAvatarStyle ? styles.oneAvatarStyle : {};
    } else if (people.length === 2) {
      return styles.twoAvatarsStyle ? styles.twoAvatarsStyle : {};
    } else {
      return styles.threeAvatarsStyle ? styles.threeAvatarsStyle : {};
    }
  };

  var getPeopleToRender = function getPeopleToRender(people) {
    if (props.isDirectChat) {
      var otherPerson = users.find(function (person) {
        return person.username !== props.username;
      });
      return otherPerson ? [otherPerson] : [];
    }

    return people.slice(0, 3);
  };

  var topPeople = getPeopleToRender(users);
  var style = getStyle(users, styles$k);
  var propsStyle = getStyle(users, props);

  if (props.renderChatAvatars) {
    return React.createElement(React.Fragment, null, props.renderChatAvatars(props));
  }

  return React.createElement("div", {
    className: "ce-chat-avatars",
    style: _extends({}, styles$k.style, props.style)
  }, React.createElement(Avatar, {
    className: "ce-chat-avatar-1",
    username: topPeople[0] ? topPeople[0].username : undefined,
    avatarUrl: topPeople[0] ? topPeople[0].avatar : undefined,
    style: _extends({}, style.avatarOne, {
      display: topPeople[0] ? 'inherit' : 'none'
    }, propsStyle.avatarOne)
  }), React.createElement(Avatar, {
    className: "ce-chat-avatar-2",
    username: topPeople[1] ? topPeople[1].username : undefined,
    avatarUrl: topPeople[1] ? topPeople[1].avatar : undefined,
    style: _extends({}, style.avatarTwo, {
      display: topPeople[1] ? 'inherit' : 'none'
    }, propsStyle.avatarTwo)
  }), React.createElement(Avatar, {
    className: "ce-chat-avatar-3",
    username: topPeople[2] ? topPeople[2].username : undefined,
    avatarUrl: topPeople[2] ? topPeople[2].avatar : undefined,
    style: _extends({}, style.avatarThree, {
      display: topPeople[2] ? 'inherit' : 'none'
    }, propsStyle.avatarThree)
  }));
};

var styles$l = {
  style: {},
  avatarStyle: {
    position: 'absolute',
    left: '12px',
    top: '2px'
  },
  usernameStyle: {
    fontFamily: 'Avenir',
    position: 'absolute',
    left: '72px',
    top: '12px',
    width: 'calc(100% - 84px - 52px - 12px)'
  },
  deleteButtonStyle: {
    position: 'absolute',
    right: '12px',
    top: '8px'
  },
  optionStyle: {
    fontFamily: 'Avenir',
    padding: '8px 12px',
    cursor: 'pointer'
  },
  addMemberStyle: {
    width: 'calc(100% - 12px - 12px)',
    position: 'relative',
    left: '12px'
  },
  addMemberInputStyle: {
    border: '1px solid rgb(24, 144, 255)'
  }
};

var styles$m = {
  style: {
    position: 'relative'
  },
  inputStyle: {
    width: '100%',
    height: '36px',
    padding: '0px 12px',
    boxSizing: 'border-box',
    fontSize: '15px',
    fontFamily: 'Avenir',
    outline: 'none',
    borderRadius: '24px'
  },
  closeStyle: {
    cursor: 'pointer',
    position: 'absolute',
    top: '5px',
    right: '12px'
  },
  optionsStyle: {
    overflow: 'hidden'
  }
};

var emptyEvent = {
  target: {
    value: ''
  }
};

var getOptions = function getOptions(value, options, maxVisibleOptions) {
  return options.filter(function (option) {
    return JSON.stringify(option).toLowerCase().indexOf(value.toLowerCase()) !== -1;
  }).slice(0, maxVisibleOptions);
};

var Autocomplete = function Autocomplete(props) {
  var ref = useRef(null);
  var didMountRef = useRef(false);

  var _useState = useState(''),
      value = _useState[0],
      setValue = _useState[1];

  var _useState2 = useState(false),
      showOptions = _useState2[0],
      setShowOptions = _useState2[1];

  useEffect(function () {
    if (!didMountRef.current) {
      didMountRef.current = true;
      document.addEventListener('mousedown', handleClickOutside);
    }

    return function () {
      return document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  var handleClickOutside = function handleClickOutside(event) {
    if (event.target !== null && ref && ref.current !== null && !ref.current.contains(event.target)) {
      setShowOptions(false);
    }
  };

  var _onChange = function onChange(event, showOptions) {
    setValue(event.target.value);
    setShowOptions(showOptions);
    props.onChange && props.onChange(event);
  };

  var renderOptions = function renderOptions(value) {
    var max = props.maxVisibleOptions ? props.maxVisibleOptions : 3;
    return getOptions(value, props.options, max).map(function (option, index) {
      return React.createElement("div", {
        key: "option-" + index
      }, props.renderOption ? props.renderOption(option) : option.toString());
    });
  };

  return React.createElement("div", {
    ref: ref,
    className: "ce-autocomplete",
    style: _extends({}, styles$m.style, props.style)
  }, React.createElement("input", {
    className: "ce-autocomplete-input",
    value: value,
    placeholder: props.label,
    style: _extends({}, styles$m.inputStyle, props.inputStyle),
    onChange: function onChange(e) {
      return _onChange(e, true);
    },
    onFocus: function onFocus(e) {
      setShowOptions(true);
      props.onFocus && props.onFocus(e);
    }
  }), React.createElement("div", {
    className: "ce-autocomplete-close",
    onClick: function onClick() {
      return _onChange(emptyEvent, true);
    },
    style: _extends({}, styles$m.closeStyle, {
      display: value.length > 0 ? 'inline-block' : 'none'
    }, props.closeStyle)
  }, "\u274C"), React.createElement("div", {
    style: _extends({}, styles$m.optionsStyle, {
      height: showOptions ? 'auto' : '0px'
    }, props.optionsStyle)
  }, renderOptions(value)));
};

var styles$n = {
  style: {
    borderTop: '1px solid #f0f0f0'
  },
  barStyle: {
    position: 'relative',
    cursor: 'pointer',
    backgroundColor: 'white',
    transition: 'all .33s ease',
    WebkitTransition: 'all .33s ease',
    MozTransition: 'all .33s ease',
    fontFamily: 'Avenir',
    fontSize: '17px',
    padding: '12px',
    fontWeight: 600
  },
  barHoveredStyle: {
    backgroundColor: '#f0f0f0'
  },
  iconStyle: {
    position: 'absolute',
    right: '12px',
    bottom: '15px',
    width: '1em',
    height: '1em',
    transition: "transform 100ms"
  },
  bodyStyle: {
    height: '0px',
    overflow: 'hidden',
    transition: 'all 1.33s ease',
    WebkitTransition: 'all 1.33s ease',
    MozTransition: 'all 1.33s ease'
  },
  bodyExpandedStyle: {
    height: 'auto'
  }
};

var Dropdown = function Dropdown(props) {
  var _useState = useState(false),
      hovered = _useState[0],
      setHovered = _useState[1];

  var _useState2 = useState(false),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  return React.createElement("div", {
    id: props.id,
    className: "ce-dropdown " + props.className,
    style: _extends({}, styles$n.style, props.style)
  }, React.createElement("div", {
    className: "ce-dropdown-label",
    onMouseEnter: function onMouseEnter() {
      return setHovered(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setHovered(false);
    },
    onClick: function onClick() {
      return setExpanded(!expanded);
    },
    style: _extends({}, styles$n.barStyle, hovered && styles$n.barHoveredStyle, props.barStyle, hovered && props.barHoveredStyle)
  }, props.label, React.createElement("svg", {
    className: "ce-dropdown-icon",
    style: _extends({}, styles$n.iconStyle, expanded ? {
      transform: "rotate(-90deg)"
    } : {
      transform: "rotate(0deg)"
    }, props.iconStyle),
    viewBox: "64 64 896 896",
    focusable: "false",
    "data-icon": "left",
    fill: "currentColor",
    "aria-hidden": "true"
  }, React.createElement("path", {
    d: "M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"
  }))), React.createElement("div", {
    className: "ce-dropdown-children",
    style: _extends({}, styles$n.bodyStyle, expanded && styles$n.bodyExpandedStyle, props.bodyStyle, expanded && props.bodyExpandedStyle)
  }, props.children));
};

var PeopleSettings = function PeopleSettings(props) {
  var _props$chat = props.chat,
      chat = _props$chat === void 0 ? {
    people: []
  } : _props$chat,
      _props$peopleToInvite = props.peopleToInvite,
      peopleToInvite = _props$peopleToInvite === void 0 ? [] : _props$peopleToInvite;

  var renderChatPeople = function renderChatPeople(chatPeople) {
    return chatPeople.map(function (chatPerson, index) {
      var person = chatPerson.person;
      return React.createElement("div", {
        key: "member-" + index,
        style: {
          height: '52px',
          position: 'relative'
        }
      }, React.createElement(Avatar, {
        username: person.username,
        avatarUrl: person.avatar,
        isOnline: person.is_online,
        style: _extends({}, styles$l.avatarStyle, props.avatarStyle)
      }), React.createElement("div", {
        style: _extends({}, styles$l.usernameStyle, props.usernameStyle)
      }, person.username), props.canDelete && React.createElement(Button, {
        type: "danger",
        className: "ce-member-delete-button",
        onClick: function onClick() {
          return props.onRemovePersonClick && props.onRemovePersonClick(person);
        },
        style: _extends({}, styles$l.deleteButtonStyle, props.deleteButtonStyle)
      }, React.createElement("svg", {
        viewBox: "64 64 896 896",
        focusable: "false",
        "data-icon": "close",
        width: "1em",
        height: "1em",
        fill: "currentColor",
        "aria-hidden": "true"
      }, React.createElement("path", {
        d: "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
      }))));
    });
  };

  var renderChatPeopleOption = function renderChatPeopleOption(option) {
    var person = option;
    var onInvitePersonClick = props.onInvitePersonClick;
    return React.createElement("div", {
      className: "ce-add-member-option",
      style: _extends({}, styles$l.optionStyle, props.optionStyle),
      onClick: function onClick() {
        return onInvitePersonClick && onInvitePersonClick(person);
      }
    }, person.username);
  };

  if (props.renderPeopleSettings) {
    return React.createElement(React.Fragment, null, props.renderPeopleSettings(props));
  }

  return React.createElement(Dropdown, {
    id: "ce-settings-people-dropdown",
    label: "Members",
    style: _extends({}, styles$l.style, props.style)
  }, renderChatPeople(chat.people), React.createElement(Autocomplete, {
    label: "Add Member",
    options: peopleToInvite,
    renderOption: renderChatPeopleOption,
    style: _extends({}, styles$l.addMemberStyle, props.addMemberStyle),
    inputStyle: _extends({}, styles$l.addMemberInputStyle, props.addMemberInputStyle)
  }));
};

var styles$o = {
  style: {},
  imageWrapperStyle: {
    position: 'relative',
    width: '33.3%',
    display: 'inline-block',
    cursor: 'pointer'
  },
  imagePaddingStyle: {
    paddingTop: '100%'
  },
  imageStyle: {
    top: '0px',
    width: '100%',
    height: '100%',
    position: 'absolute',
    objectFit: 'cover',
    padding: '0px',
    borderRadius: '0px'
  }
};

var PhotosSettings = function PhotosSettings(props) {
  var _props$chat = props.chat,
      chat = _props$chat === void 0 ? {
    attachments: []
  } : _props$chat;

  var renderImages = function renderImages(attachments) {
    return attachments.map(function (attachment, index) {
      var fileName = getFileName(attachment.file);

      if (isImage(fileName)) {
        return React.createElement("div", {
          key: "photo-" + index,
          style: _extends({}, styles$o.imageWrapperStyle, props.imageWrapperStyle)
        }, React.createElement("div", {
          style: _extends({}, styles$o.imagePaddingStyle, props.imagePaddingStyle)
        }), React.createElement(Image, {
          key: "attachment_" + index,
          className: "ce-settings-image",
          url: attachment.file !== null ? attachment.file : undefined,
          style: _extends({}, styles$o.imageStyle, props.imageStyle)
        }));
      }

      return React.createElement("span", {
        key: "photo-" + index
      });
    });
  };

  if (props.renderPhotosSettings) {
    return React.createElement(React.Fragment, null, props.renderPhotosSettings(props));
  }

  return React.createElement(Dropdown, {
    id: "ce-settings-photos-dropdown",
    label: "Photos",
    style: _extends({}, styles$o.style, props.style)
  }, renderImages(chat.attachments));
};

var styles$p = {
  style: {},
  deleteChatButtonStyle: {
    width: 'calc(100% - 24px)',
    position: 'relative',
    left: '12px'
  }
};

var OptionsSettings = function OptionsSettings(props) {
  if (props.renderOptionsSettings) {
    return React.createElement(React.Fragment, null, props.renderOptionsSettings(props));
  }

  return React.createElement(Dropdown, {
    id: "ce-settings-options-dropdown",
    label: "Options",
    style: _extends({}, styles$p.style, props.style)
  }, React.createElement(Button, {
    type: "danger",
    onClick: function onClick() {
      return props.onDeleteChatClick && props.chat && props.onDeleteChatClick(props.chat);
    },
    style: _extends({}, styles$p.deleteChatButtonStyle, props.deleteChatButtonStyle)
  }, "Delete this Chat"));
};

var ChatSettings = function ChatSettings(props) {
  var chat = props.chat;

  if (props.renderChatSettings) {
    return React.createElement(React.Fragment, null, props.renderChatSettings(props));
  }

  var people = chat ? chat.people.map(function (chatPerson) {
    return chatPerson.person;
  }) : [];
  var otherPerson = chat && chat.people.find(function (person) {
    return person.person.username !== props.username;
  });
  var title = props.isLoading || !chat ? '' : chat.is_direct_chat && otherPerson ? otherPerson.person.username : chat.title;
  return React.createElement("div", {
    className: "ce-chat-settings",
    style: _extends({}, styles$j.style, props.style)
  }, React.createElement(ChatAvatars, {
    users: people,
    username: props.username,
    renderChatAvatars: props.renderChatAvatars
  }), React.createElement("div", {
    className: "ce-chat-settings-title",
    style: _extends({}, styles$j.chatTitleStyle, props.chatTitleStyle)
  }, title), React.createElement(PeopleSettings, {
    chat: chat,
    peopleToInvite: props.peopleToInvite,
    canDelete: chat && props.username === chat.admin.username,
    onInvitePersonClick: props.onInvitePersonClick,
    onRemovePersonClick: props.onRemovePersonClick,
    renderPeopleSettings: props.renderPeopleSettings,
    style: _extends({}, styles$j.peopleSettingsStyle, props.peopleSettingsStyle)
  }), React.createElement(PhotosSettings, {
    chat: chat,
    renderPhotosSettings: props.renderPhotosSettings,
    style: _extends({}, styles$j.photosSettingsStyle, props.photosSettingsStyle)
  }), React.createElement(OptionsSettings, {
    chat: chat,
    onDeleteChatClick: props.onDeleteChatClick,
    renderOptionsSettings: props.renderOptionsSettings,
    style: _extends({}, styles$j.optionsSettingsStyle, props.optionsSettingsStyle)
  }));
};

setConfiguration({
  maxScreenClass: 'xl',
  gutterWidth: 0
});
var MultiChatWindow = function MultiChatWindow(props) {
  if (typeof window == 'undefined') return React.createElement("div", null);
  var _props$chats = props.chats,
      chats = _props$chats === void 0 ? [] : _props$chats,
      _props$activeChatId = props.activeChatId,
      activeChatId = _props$activeChatId === void 0 ? -1 : _props$activeChatId,
      _props$messages = props.messages,
      messages = _props$messages === void 0 ? [] : _props$messages;

  var _useState = useState(window.innerWidth < 575),
      isMobile = _useState[0],
      setIsMobile = _useState[1];

  var chat = chats.find(function (chat) {
    return chat.id === activeChatId;
  });
  useEffect(function () {
    function handleResize() {
      setIsMobile(window.innerWidth < 575);
    }

    window.addEventListener('resize', handleResize);
  });

  var renderChatList = function renderChatList() {
    return React.createElement(ChatList, {
      chats: chats,
      activeChatId: activeChatId,
      username: props.username,
      timezoneOffset: props.timezoneOffset,
      isLoading: props.isChatListLoading,
      hasMoreChats: props.hasMoreChats,
      onChatFormSubmit: props.onChatFormSubmit,
      onChatCardClick: props.onChatCardClick,
      onChatLoaderShow: props.onChatLoaderShow,
      renderChatList: props.renderChatList,
      renderChatForm: props.renderChatForm,
      renderChatCard: props.renderChatCard,
      style: {
        position: isMobile ? 'absolute' : 'inherit',
        zIndex: isMobile ? 1 : 'inherit'
      }
    });
  };

  var renderChatSettings = function renderChatSettings() {
    return React.createElement(ChatSettings, {
      chat: chat,
      username: props.username,
      peopleToInvite: props.peopleToInvite,
      isLoading: props.isChatSettingsLoading,
      onInvitePersonClick: props.onInvitePersonClick,
      onRemovePersonClick: props.onRemovePersonClick,
      onDeleteChatClick: props.onDeleteChatClick,
      renderChatSettings: props.renderChatSettings,
      renderChatAvatars: function renderChatAvatars(chatAvatarsProps) {
        return React.createElement(React.Fragment, null, React.createElement(ChatAvatars, Object.assign({}, chatAvatarsProps, {
          renderChatAvatars: props.renderChatAvatars
        })), isMobile && React.createElement(Button, {
          onClick: props.onCloseMobileChatSettingsClick,
          style: {
            position: 'absolute',
            top: '12px',
            right: '12px'
          }
        }, React.createElement(CloseOutlined, null)));
      },
      renderPeopleSettings: props.renderPeopleSettings,
      renderPhotosSettings: props.renderPhotosSettings,
      renderOptionsSettings: props.renderOptionsSettings,
      style: {
        position: isMobile ? 'absolute' : 'inherit',
        zIndex: isMobile ? 1 : 'inherit'
      }
    });
  };

  return React.createElement(Row, {
    className: "ce-chat-engine",
    style: _extends({}, styles.style, props.style)
  }, React.createElement(Col, {
    xs: 0,
    sm: 3,
    className: "ce-chat-list-column",
    style: _extends({}, styles.chatListColumnStyle, props.chatListColumnStyle)
  }, renderChatList()), React.createElement(Col, {
    xs: 12,
    sm: 6,
    className: "ce-chat-feed-column",
    style: _extends({}, styles.chatFeedColumnStyle, props.chatFeedColumnStyle)
  }, React.createElement(ChatFeed, {
    chat: chat,
    messages: messages,
    username: props.username,
    timezoneOffset: props.timezoneOffset,
    isLoading: props.isChatFeedLoading,
    hasMoreMessages: props.hasMoreMessages,
    onMessageLoaderShow: props.onMessageLoaderShow,
    onMessageLoaderHide: props.onMessageLoaderHide,
    onBottomMessageShow: props.onBottomMessageShow,
    onBottomMessageHide: props.onBottomMessageHide,
    onMessageFormSubmit: props.onMessageFormSubmit,
    renderChatFeed: props.renderChatFeed,
    renderChatHeader: props.renderChatHeader,
    renderMessageList: props.renderMessageList,
    renderMessage: props.renderMessage,
    renderWelcomeGif: props.renderWelcomeGif,
    renderMessageForm: props.renderMessageForm
  })), React.createElement(Col, {
    xs: 0,
    sm: 3,
    className: "ce-chat-settings-column",
    style: _extends({}, styles.chatSettingsColumnStyle, props.chatSettingsColumnStyle)
  }, renderChatSettings()), React.createElement(Button, {
    onClick: props.onMobileChatListClick,
    className: "ce-mobile-chat-list-button",
    style: _extends({}, styles.chatListMobileButtonStyle, {
      display: isMobile ? 'inherit' : 'none'
    }, props.chatListMobileButtonStyle)
  }, React.createElement(UnorderedListOutlined, null)), isMobile && props.isMobileChatListOpen && renderChatList(), React.createElement(Button, {
    onClick: props.onMobileChatSettingsClick,
    className: "ce-mobile-chat-settings-button",
    style: _extends({}, styles.chatSettingsMobileButtonStyle, {
      display: isMobile ? 'inherit' : 'none'
    }, props.chatSettingsMobileButtonStyle)
  }, React.createElement(SettingOutlined, null)), isMobile && props.isMobileChatSettingsOpen && renderChatSettings());
};

var scrollToBottom = function scrollToBottom(duration, containerId) {
  if (document.getElementById(containerId)) {
    animateScroll.scrollToBottom({
      duration: duration,
      containerId: containerId
    });
  }
};

var chatCountIterator = 20;
var messageCountIterator = 50;
var sortChats = function sortChats(chats) {
  return chats.sort(function (a, b) {
    var aDate = a.last_message && a.last_message.created ? getDateTime(a.last_message.created) : getDateTime(a.created);
    var bDate = b.last_message && b.last_message.created ? getDateTime(b.last_message.created) : getDateTime(b.created);
    return new Date(bDate).getTime() - new Date(aDate).getTime();
  });
};
var sortMessages = function sortMessages(messages) {
  return messages.sort(function (a, b) {
    return new Date(b.created).getTime() - new Date(a.created).getTime();
  });
};
var useMultiChatLogic = function useMultiChatLogic(projectId, username, secret, httpUrl) {
  var host = httpUrl ? httpUrl : 'https://api.chatengine.io';
  var headers = {
    'Public-Key': projectId,
    'User-Name': username,
    'User-Secret': secret
  }; // Data

  var _useState = useState(),
      activeChatId = _useState[0],
      setActiveChatId = _useState[1];

  var _useState2 = useState([]),
      chats = _useState2[0],
      setChats = _useState2[1];

  var _useState3 = useState([]),
      messages = _useState3[0],
      setMessages = _useState3[1];

  var _useState4 = useState([]),
      peopleToInvite = _useState4[0],
      setPeopleToInvite = _useState4[1]; // State


  var _useState5 = useState(false),
      hasMoreChats = _useState5[0],
      setHasMoreChats = _useState5[1];

  var _useState6 = useState(false),
      hasMoreMessages = _useState6[0],
      setHasMoreMessages = _useState6[1];

  var _useState7 = useState(false),
      isChatFeedAtBottom = _useState7[0],
      setIsChatFeedAtBottom = _useState7[1];

  var _useState8 = useState(true),
      isChatListLoading = _useState8[0],
      setIsChatListLoading = _useState8[1];

  var _useState9 = useState(true),
      isChatFeedLoading = _useState9[0],
      setIsChatFeedLoading = _useState9[1];

  var _useState10 = useState(true),
      isChatSettingsLoading = _useState10[0],
      setIsChatSettingsLoading = _useState10[1];

  var _useState11 = useState(false),
      isMobileChatListOpen = _useState11[0],
      setIsMobileChatListOpen = _useState11[1];

  var _useState12 = useState(false),
      isMobileChatSettingsOpen = _useState12[0],
      setIsMobileChatSettingsOpen = _useState12[1]; // Subscribe to Chat & Message Count


  var chatCountRef = useRef(0);
  chatCountRef.current = chats.length;
  var messageCountRef = useRef(0);
  messageCountRef.current = messages.length;
  var chat = chats.find(function (chat) {
    return chat.id === activeChatId;
  }); // Fetch data on mount

  var didMountRef = useRef(false);
  useEffect(function () {
    if (!didMountRef.current) {
      didMountRef.current = true;
      fetchMultiChatData();
    }
  }, []);
  useEffect(function () {
    var chat = chats.find(function (chat) {
      return chat.id === activeChatId;
    });
    var chatPerson = chat == null ? void 0 : chat.people.find(function (chatPerson) {
      return chatPerson.person.username === username;
    });

    if (activeChatId && chat != null && chat.last_message.id && // If there is a message
    chat.last_message.id !== (chatPerson == null ? void 0 : chatPerson.last_read) && isChatFeedAtBottom) {
      readMessage(host, headers, activeChatId, chat.last_message.id, function () {});
    }
  }, [chats, activeChatId, isChatFeedAtBottom]);

  function fetchMultiChatData() {
    return _fetchMultiChatData.apply(this, arguments);
  }

  function _fetchMultiChatData() {
    _fetchMultiChatData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var now;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              now = new Date().toISOString().replace('T', ' ').replace('Z', Math.floor(Math.random() * 1000) + "+00:00");
              getChatsBefore(host, headers, now, chatCountRef.current > 0 ? chatCountRef.current : chatCountIterator, function (chats) {
                onGetChats(chats);
                var currentChat = activeChatId;

                if (!activeChatId && chats.length > 0) {
                  currentChat = chats[0].id;
                }

                currentChat ? onChatCardClick(currentChat) : setIsChatFeedLoading(false);
              });
              return _context.abrupt("return");

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _fetchMultiChatData.apply(this, arguments);
  }

  function onGetChats(_x) {
    return _onGetChats.apply(this, arguments);
  }

  function _onGetChats() {
    _onGetChats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(chats) {
      var sortedChats;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (chats === void 0) {
                chats = [];
              }

              setHasMoreChats(chats.length >= chatCountRef.current + chatCountIterator);
              sortedChats = sortChats(chats);
              setChats(sortedChats);
              setIsChatListLoading(false);
              return _context2.abrupt("return");

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _onGetChats.apply(this, arguments);
  }

  function onNewChat(_x2) {
    return _onNewChat.apply(this, arguments);
  }

  function _onNewChat() {
    _onNewChat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(chat) {
      var newChats;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              newChats = [chat].concat(chats ? chats : []);
              setChats(newChats);
              return _context3.abrupt("return");

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _onNewChat.apply(this, arguments);
  }

  function onEditChat(_x3) {
    return _onEditChat.apply(this, arguments);
  }

  function _onEditChat() {
    _onEditChat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(newChat) {
      var otherChats, newChats, sortedChats;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              otherChats = chats ? chats.filter(function (chat) {
                return chat.id !== newChat.id;
              }) : [];
              newChats = [newChat].concat(otherChats);
              sortedChats = sortChats(newChats);
              setChats(sortedChats);
              return _context4.abrupt("return");

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _onEditChat.apply(this, arguments);
  }

  function onDeleteChat(_x4) {
    return _onDeleteChat.apply(this, arguments);
  }

  function _onDeleteChat() {
    _onDeleteChat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(oldChat) {
      var newChats;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              newChats = chats ? chats.filter(function (chat) {
                return chat.id !== oldChat.id;
              }) : [];
              setChats(newChats);
              if (newChats.length > 0 && activeChatId === oldChat.id) onChatCardClick(newChats[0].id);
              return _context5.abrupt("return");

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return _onDeleteChat.apply(this, arguments);
  }

  function onGetMessages(_x5, _x6) {
    return _onGetMessages.apply(this, arguments);
  }

  function _onGetMessages() {
    _onGetMessages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(chatId, messages) {
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              setHasMoreMessages(messages.length >= messageCountRef.current + messageCountIterator);
              setMessages(messages);
              return _context6.abrupt("return");

            case 4:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));
    return _onGetMessages.apply(this, arguments);
  }

  function onNewMessage(_x7, _x8) {
    return _onNewMessage.apply(this, arguments);
  }

  function _onNewMessage() {
    _onNewMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(chatId, newMessage) {
      var otherMessages, newMessages, sortedMessages;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (activeChatId === chatId) {
                otherMessages = messages ? messages.filter(function (message) {
                  return message.created !== newMessage.created;
                }) : [];
                newMessages = otherMessages.concat(newMessage);
                sortedMessages = sortMessages(newMessages);
                setMessages(sortedMessages);

                if (isChatFeedAtBottom) {
                  scrollToBottom(333, "ce-message-list-" + activeChatId);
                }
              }

              return _context7.abrupt("return");

            case 2:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));
    return _onNewMessage.apply(this, arguments);
  }

  function onEditMessage(_x9, _x10) {
    return _onEditMessage.apply(this, arguments);
  }

  function _onEditMessage() {
    _onEditMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(chatId, newMessage) {
      var otherMessages, newMessages, sortedMessages;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (chatId === activeChatId) {
                otherMessages = messages ? messages.filter(function (message) {
                  return message.id !== newMessage.id;
                }) : [];
                newMessages = [newMessage].concat(otherMessages);
                sortedMessages = sortMessages(newMessages);
                setMessages(sortedMessages);
              }

              return _context8.abrupt("return");

            case 2:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));
    return _onEditMessage.apply(this, arguments);
  }

  function onDeleteMessage(_x11, _x12) {
    return _onDeleteMessage.apply(this, arguments);
  }

  function _onDeleteMessage() {
    _onDeleteMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(chatId, oldMessage) {
      var newMessages;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              if (chatId === activeChatId) {
                newMessages = messages ? messages.filter(function (message) {
                  return message.id !== oldMessage.id;
                }) : [];
                setMessages(newMessages);
              }

              return _context9.abrupt("return");

            case 2:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));
    return _onDeleteMessage.apply(this, arguments);
  }

  function onConnect() {
    return _onConnect.apply(this, arguments);
  }

  function _onConnect() {
    _onConnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              fetchMultiChatData();
              return _context10.abrupt("return");

            case 2:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));
    return _onConnect.apply(this, arguments);
  }

  function onAuthFail() {
    return _onAuthFail.apply(this, arguments);
  }

  function _onAuthFail() {
    _onAuthFail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));
    return _onAuthFail.apply(this, arguments);
  }

  function onChatFormSubmit(_x13) {
    return _onChatFormSubmit.apply(this, arguments);
  }

  function _onChatFormSubmit() {
    _onChatFormSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(title) {
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              newChat(host, headers, title, function (chat) {
                onNewChat(chat);
                onChatCardClick(chat.id);
              });
              return _context12.abrupt("return");

            case 2:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));
    return _onChatFormSubmit.apply(this, arguments);
  }

  function onChatCardClick(_x14) {
    return _onChatCardClick.apply(this, arguments);
  }

  function _onChatCardClick() {
    _onChatCardClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(newActiveChatId) {
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              if (newActiveChatId !== activeChatId) {
                setIsChatFeedLoading(true);
                setIsChatSettingsLoading(true);
              }

              setActiveChatId(newActiveChatId);
              setIsMobileChatListOpen(false);
              getMessages(host, headers, newActiveChatId, messageCountIterator, function (chatId, messages) {
                onGetMessages(chatId, messages);
                setIsChatFeedLoading(false);
                setIsChatSettingsLoading(false);
                scrollToBottom(0, "ce-message-list-" + activeChatId);
              });
              getPeopleToInvite(host, headers, newActiveChatId, setPeopleToInvite);
              return _context13.abrupt("return");

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));
    return _onChatCardClick.apply(this, arguments);
  }

  function onChatLoaderShow() {
    return _onChatLoaderShow.apply(this, arguments);
  }

  function _onChatLoaderShow() {
    _onChatLoaderShow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
      var now;
      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              now = new Date().toISOString().replace('T', ' ').replace('Z', "0000+00:00");
              getChatsBefore(host, headers, now, chatCountRef.current + chatCountIterator, onGetChats);
              return _context14.abrupt("return");

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));
    return _onChatLoaderShow.apply(this, arguments);
  }

  function onMessageFormSubmit(_x15) {
    return _onMessageFormSubmit.apply(this, arguments);
  }

  function _onMessageFormSubmit() {
    _onMessageFormSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(message) {
      var newMessages;
      return _regeneratorRuntime().wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              newMessages = messages == null ? void 0 : messages.concat(message);
              setMessages(newMessages);
              newMessage(host, headers, activeChatId, message, function () {});
              setTimeout(function () {
                scrollToBottom(333, "ce-message-list-" + activeChatId);
              }, 100);
              return _context15.abrupt("return");

            case 5:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));
    return _onMessageFormSubmit.apply(this, arguments);
  }

  function onInvitePersonClick(_x16) {
    return _onInvitePersonClick.apply(this, arguments);
  }

  function _onInvitePersonClick() {
    _onInvitePersonClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(person) {
      return _regeneratorRuntime().wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              activeChatId && invitePerson(host, headers, activeChatId, person.username, function () {
                return onChatCardClick(activeChatId);
              });

            case 1:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));
    return _onInvitePersonClick.apply(this, arguments);
  }

  function onRemovePersonClick(_x17) {
    return _onRemovePersonClick.apply(this, arguments);
  }

  function _onRemovePersonClick() {
    _onRemovePersonClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(person) {
      return _regeneratorRuntime().wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              activeChatId && removePerson(host, headers, activeChatId, person.username, function () {
                return onChatCardClick(activeChatId);
              });
              return _context17.abrupt("return");

            case 2:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));
    return _onRemovePersonClick.apply(this, arguments);
  }

  function onDeleteChatClick(_x18) {
    return _onDeleteChatClick.apply(this, arguments);
  }

  function _onDeleteChatClick() {
    _onDeleteChatClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(chat) {
      return _regeneratorRuntime().wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              deleteChat(host, headers, chat.id, onDeleteChat);
              return _context18.abrupt("return");

            case 2:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }));
    return _onDeleteChatClick.apply(this, arguments);
  }

  function onBottomMessageShow() {
    return _onBottomMessageShow.apply(this, arguments);
  }

  function _onBottomMessageShow() {
    _onBottomMessageShow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
      return _regeneratorRuntime().wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              setIsChatFeedAtBottom(true);
              return _context19.abrupt("return");

            case 2:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));
    return _onBottomMessageShow.apply(this, arguments);
  }

  function onBottomMessageHide() {
    return _onBottomMessageHide.apply(this, arguments);
  }

  function _onBottomMessageHide() {
    _onBottomMessageHide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
      return _regeneratorRuntime().wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              setIsChatFeedAtBottom(false);
              return _context20.abrupt("return");

            case 2:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));
    return _onBottomMessageHide.apply(this, arguments);
  }

  function onMessageLoaderShow() {
    return _onMessageLoaderShow.apply(this, arguments);
  }

  function _onMessageLoaderShow() {
    _onMessageLoaderShow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
      var scrollContainerId, messageListId, currentElement, currentHeight;
      return _regeneratorRuntime().wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              scrollContainerId = "ce-message-list-" + activeChatId;
              messageListId = "ce-message-list-content-" + activeChatId;
              currentElement = document.getElementById(messageListId);
              currentHeight = currentElement ? currentElement.clientHeight : 0;
              activeChatId && getMessages(host, headers, activeChatId, messageCountRef.current + messageCountIterator, function (chatId, messages) {
                onGetMessages(chatId, messages);
                setTimeout(function () {
                  var element = document.getElementById(messageListId);

                  if (element) {
                    animateScroll.scrollTo(element.clientHeight - currentHeight, {
                      duration: 333,
                      containerId: scrollContainerId
                    });
                  }
                }, 1000);
              });
              return _context21.abrupt("return");

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));
    return _onMessageLoaderShow.apply(this, arguments);
  }

  function onMessageLoaderHide() {
    return _onMessageLoaderHide.apply(this, arguments);
  }

  function _onMessageLoaderHide() {
    _onMessageLoaderHide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
      return _regeneratorRuntime().wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              return _context22.abrupt("return");

            case 1:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    }));
    return _onMessageLoaderHide.apply(this, arguments);
  }

  function onIsTyping(_x19, _x20) {
    return _onIsTyping.apply(this, arguments);
  }

  function _onIsTyping() {
    _onIsTyping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(id, person) {
      return _regeneratorRuntime().wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              return _context23.abrupt("return");

            case 2:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));
    return _onIsTyping.apply(this, arguments);
  }

  function onMobileChatListClick() {
    return _onMobileChatListClick.apply(this, arguments);
  }

  function _onMobileChatListClick() {
    _onMobileChatListClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
      return _regeneratorRuntime().wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              setIsMobileChatListOpen(true);
              return _context24.abrupt("return");

            case 2:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }));
    return _onMobileChatListClick.apply(this, arguments);
  }

  function onMobileChatSettingsClick() {
    return _onMobileChatSettingsClick.apply(this, arguments);
  }

  function _onMobileChatSettingsClick() {
    _onMobileChatSettingsClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
      return _regeneratorRuntime().wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              setIsMobileChatSettingsOpen(true);
              return _context25.abrupt("return");

            case 2:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));
    return _onMobileChatSettingsClick.apply(this, arguments);
  }

  function onCloseMobileChatSettingsClick() {
    return _onCloseMobileChatSettingsClick.apply(this, arguments);
  }

  function _onCloseMobileChatSettingsClick() {
    _onCloseMobileChatSettingsClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
      return _regeneratorRuntime().wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              setIsMobileChatSettingsOpen(false);
              return _context26.abrupt("return");

            case 2:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }));
    return _onCloseMobileChatSettingsClick.apply(this, arguments);
  }

  return {
    // Socket Hooks
    onConnect: onConnect,
    onAuthFail: onAuthFail,
    onGetChats: onGetChats,
    onNewChat: onNewChat,
    onEditChat: onEditChat,
    onDeleteChat: onDeleteChat,
    onGetMessages: onGetMessages,
    onNewMessage: onNewMessage,
    onEditMessage: onEditMessage,
    onDeleteMessage: onDeleteMessage,
    onIsTyping: onIsTyping,
    // Auth Data
    projectId: projectId,
    username: username,
    // file deepcode ignore HardcodedNonCryptoSecret: <not a secret>
    secret: secret,
    httpUrl: httpUrl,
    wsUrl: httpUrl && httpUrl.replace('http', 'ws'),
    // Chat Data
    chats: chats,
    setChats: setChats,
    messages: messages,
    setMessages: setMessages,
    peopleToInvite: peopleToInvite,
    setPeopleToInvite: setPeopleToInvite,
    // Chat State
    activeChatId: activeChatId,
    setActiveChatId: setActiveChatId,
    chat: chat,
    hasMoreChats: hasMoreChats,
    setHasMoreChats: setHasMoreChats,
    hasMoreMessages: hasMoreMessages,
    setHasMoreMessages: setHasMoreMessages,
    isChatFeedAtBottom: isChatFeedAtBottom,
    setIsChatFeedAtBottom: setIsChatFeedAtBottom,
    isChatListLoading: isChatListLoading,
    setIsChatListLoading: setIsChatListLoading,
    isChatFeedLoading: isChatFeedLoading,
    setIsChatFeedLoading: setIsChatFeedLoading,
    isChatSettingsLoading: isChatSettingsLoading,
    setIsChatSettingsLoading: setIsChatSettingsLoading,
    isMobileChatListOpen: isMobileChatListOpen,
    setIsMobileChatListOpen: setIsMobileChatListOpen,
    isMobileChatSettingsOpen: isMobileChatSettingsOpen,
    setIsMobileChatSettingsOpen: setIsMobileChatSettingsOpen,
    // Component Hooks
    onChatFormSubmit: onChatFormSubmit,
    onChatCardClick: onChatCardClick,
    onChatLoaderShow: onChatLoaderShow,
    onMessageLoaderShow: onMessageLoaderShow,
    onMessageLoaderHide: onMessageLoaderHide,
    onBottomMessageShow: onBottomMessageShow,
    onBottomMessageHide: onBottomMessageHide,
    onMessageFormSubmit: onMessageFormSubmit,
    onInvitePersonClick: onInvitePersonClick,
    onRemovePersonClick: onRemovePersonClick,
    onDeleteChatClick: onDeleteChatClick,
    onMobileChatListClick: onMobileChatListClick,
    onMobileChatSettingsClick: onMobileChatSettingsClick,
    onCloseMobileChatSettingsClick: onCloseMobileChatSettingsClick
  };
};

var messageCountIterator$1 = 50;
var sortMessages$1 = function sortMessages(messages) {
  return messages.sort(function (a, b) {
    return new Date(b.created).getTime() - new Date(a.created).getTime();
  });
};
var useSingleChatLogic = function useSingleChatLogic(projectId, chatId, chatAccessKey, httpUrl) {
  var host = httpUrl ? httpUrl : 'https://api.chatengine.io';
  var headers = {
    'Public-Key': projectId,
    'Chat-ID': chatId,
    'Access-Key': chatAccessKey
  }; // Data

  var _useState = useState(),
      activeChatId = _useState[0],
      setActiveChatId = _useState[1];

  var _useState2 = useState(),
      chat = _useState2[0],
      setChat = _useState2[1];

  var _useState3 = useState([]),
      messages = _useState3[0],
      setMessages = _useState3[1];

  var _useState4 = useState([]),
      peopleToInvite = _useState4[0],
      setPeopleToInvite = _useState4[1]; // State


  var _useState5 = useState(false),
      hasMoreChats = _useState5[0],
      setHasMoreChats = _useState5[1];

  var _useState6 = useState(false),
      hasMoreMessages = _useState6[0],
      setHasMoreMessages = _useState6[1];

  var _useState7 = useState(false),
      isChatFeedAtBottom = _useState7[0],
      setIsChatFeedAtBottom = _useState7[1];

  var _useState8 = useState(true),
      isChatFeedLoading = _useState8[0],
      setIsChatFeedLoading = _useState8[1]; // Subscribe to Chat & Message Count


  var chatCountRef = useRef(0);
  chatCountRef.current = chat ? 1 : 0;
  var messageCountRef = useRef(0);
  messageCountRef.current = messages.length; // Fetch data on mount

  var didMountRef = useRef(false);
  useEffect(function () {
    if (!didMountRef.current) {
      didMountRef.current = true;
      fetchSingleChatData();
    }
  }, []);

  function fetchSingleChatData() {
    return _fetchSingleChatData.apply(this, arguments);
  }

  function _fetchSingleChatData() {
    _fetchSingleChatData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              getChat(host, headers, chatId, function (chat) {
                setChat(chat);
                onChatCardClick(chat.id);
              });

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _fetchSingleChatData.apply(this, arguments);
  }

  function onEditChat(_x) {
    return _onEditChat.apply(this, arguments);
  }

  function _onEditChat() {
    _onEditChat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(chat) {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              setChat(chat);

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _onEditChat.apply(this, arguments);
  }

  function onDeleteChat() {
    return _onDeleteChat.apply(this, arguments);
  }

  function _onDeleteChat() {
    _onDeleteChat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              setChat(undefined);
              setActiveChatId(undefined);

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _onDeleteChat.apply(this, arguments);
  }

  function onGetMessages(_x2, _x3) {
    return _onGetMessages.apply(this, arguments);
  }

  function _onGetMessages() {
    _onGetMessages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(chatId, messages) {
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              setHasMoreMessages(messages.length >= messageCountRef.current + messageCountIterator$1);
              setMessages(messages);
              setIsChatFeedLoading(false);

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _onGetMessages.apply(this, arguments);
  }

  function onNewMessage(_x4, _x5) {
    return _onNewMessage.apply(this, arguments);
  }

  function _onNewMessage() {
    _onNewMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(chatId, newMessage) {
      var otherMessages, newMessages, sortedMessages;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (activeChatId === chatId) {
                otherMessages = messages ? messages.filter(function (message) {
                  return message.created !== newMessage.created;
                }) : [];
                newMessages = otherMessages.concat(newMessage);
                sortedMessages = sortMessages$1(newMessages);
                setMessages(sortedMessages);

                if (isChatFeedAtBottom) {
                  scrollToBottom(333, "ce-message-list-" + activeChatId);
                }
              }

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return _onNewMessage.apply(this, arguments);
  }

  function onEditMessage(_x6, _x7) {
    return _onEditMessage.apply(this, arguments);
  }

  function _onEditMessage() {
    _onEditMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(chatId, newMessage) {
      var otherMessages, newMessages, sortedMessages;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (chatId === activeChatId) {
                otherMessages = messages ? messages.filter(function (message) {
                  return message.id !== newMessage.id;
                }) : [];
                newMessages = [newMessage].concat(otherMessages);
                sortedMessages = sortMessages$1(newMessages);
                setMessages(sortedMessages);
              }

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));
    return _onEditMessage.apply(this, arguments);
  }

  function onDeleteMessage(_x8, _x9) {
    return _onDeleteMessage.apply(this, arguments);
  }

  function _onDeleteMessage() {
    _onDeleteMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(chatId, oldMessage) {
      var newMessages;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (chatId === activeChatId) {
                newMessages = messages ? messages.filter(function (message) {
                  return message.id !== oldMessage.id;
                }) : [];
                setMessages(newMessages);
              }

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));
    return _onDeleteMessage.apply(this, arguments);
  }

  function onConnect() {
    return _onConnect.apply(this, arguments);
  }

  function _onConnect() {
    _onConnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              fetchSingleChatData();

            case 1:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));
    return _onConnect.apply(this, arguments);
  }

  function onAuthFail() {
    return _onAuthFail.apply(this, arguments);
  }

  function _onAuthFail() {
    _onAuthFail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));
    return _onAuthFail.apply(this, arguments);
  }

  function onChatCardClick(_x10) {
    return _onChatCardClick.apply(this, arguments);
  }

  function _onChatCardClick() {
    _onChatCardClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(activeChatId) {
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              setActiveChatId(activeChatId);
              getMessages(host, headers, activeChatId, messageCountIterator$1, function (chatId, messages) {
                onGetMessages(chatId, messages);
                scrollToBottom(0, "ce-message-list-" + activeChatId);
              });

            case 2:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));
    return _onChatCardClick.apply(this, arguments);
  }

  function onMessageFormSubmit(_x11) {
    return _onMessageFormSubmit.apply(this, arguments);
  }

  function _onMessageFormSubmit() {
    _onMessageFormSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(message) {
      var newMessages;
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              newMessages = messages == null ? void 0 : messages.concat(message);
              setMessages(newMessages);
              newMessage(host, headers, activeChatId, message, function () {});
              setTimeout(function () {
                scrollToBottom(333, "ce-message-list-" + activeChatId);
              }, 100);

            case 4:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));
    return _onMessageFormSubmit.apply(this, arguments);
  }

  function onBottomMessageShow() {
    return _onBottomMessageShow.apply(this, arguments);
  }

  function _onBottomMessageShow() {
    _onBottomMessageShow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              setIsChatFeedAtBottom(true);

            case 1:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));
    return _onBottomMessageShow.apply(this, arguments);
  }

  function onBottomMessageHide() {
    return _onBottomMessageHide.apply(this, arguments);
  }

  function _onBottomMessageHide() {
    _onBottomMessageHide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              setIsChatFeedAtBottom(false);

            case 1:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));
    return _onBottomMessageHide.apply(this, arguments);
  }

  function onMessageLoaderShow() {
    return _onMessageLoaderShow.apply(this, arguments);
  }

  function _onMessageLoaderShow() {
    _onMessageLoaderShow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
      var scrollContainerId, messageListId, currentElement, currentHeight;
      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              scrollContainerId = "ce-message-list-" + activeChatId;
              messageListId = "ce-message-list-content-" + activeChatId;
              currentElement = document.getElementById(messageListId);
              currentHeight = currentElement ? currentElement.clientHeight : 0;
              activeChatId && getMessages(host, headers, activeChatId, messageCountRef.current + messageCountIterator$1, function (chatId, messages) {
                onGetMessages(chatId, messages);
                setTimeout(function () {
                  var element = document.getElementById(messageListId);

                  if (element) {
                    animateScroll.scrollTo(element.clientHeight - currentHeight, {
                      duration: 333,
                      containerId: scrollContainerId
                    });
                  }
                }, 1000);
              });

            case 5:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }));
    return _onMessageLoaderShow.apply(this, arguments);
  }

  function onMessageLoaderHide() {
    return _onMessageLoaderHide.apply(this, arguments);
  }

  function _onMessageLoaderHide() {
    _onMessageLoaderHide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
      return _regeneratorRuntime().wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }));
    return _onMessageLoaderHide.apply(this, arguments);
  }

  function onIsTyping(_x12, _x13) {
    return _onIsTyping.apply(this, arguments);
  }

  function _onIsTyping() {
    _onIsTyping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(id, person) {
      return _regeneratorRuntime().wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:

            case 1:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));
    return _onIsTyping.apply(this, arguments);
  }

  return {
    // Socket Hooks
    onConnect: onConnect,
    onAuthFail: onAuthFail,
    onEditChat: onEditChat,
    onDeleteChat: onDeleteChat,
    onGetMessages: onGetMessages,
    onNewMessage: onNewMessage,
    onEditMessage: onEditMessage,
    onDeleteMessage: onDeleteMessage,
    onIsTyping: onIsTyping,
    // Auth Data
    projectId: projectId,
    chatId: chatId,
    chatAccessKey: chatAccessKey,
    httpUrl: httpUrl,
    wsUrl: httpUrl && httpUrl.replace('http', 'ws'),
    // Chat Data
    activeChatId: activeChatId,
    setActiveChatId: setActiveChatId,
    chat: chat,
    messages: messages,
    setMessages: setMessages,
    peopleToInvite: peopleToInvite,
    setPeopleToInvite: setPeopleToInvite,
    // Chat State
    hasMoreChats: hasMoreChats,
    setHasMoreChats: setHasMoreChats,
    hasMoreMessages: hasMoreMessages,
    setHasMoreMessages: setHasMoreMessages,
    isChatFeedAtBottom: isChatFeedAtBottom,
    setIsChatFeedAtBottom: setIsChatFeedAtBottom,
    isChatFeedLoading: isChatFeedLoading,
    setIsChatFeedLoading: setIsChatFeedLoading,
    // Component Hooks
    onChatCardClick: onChatCardClick,
    onMessageLoaderShow: onMessageLoaderShow,
    onMessageLoaderHide: onMessageLoaderHide,
    onBottomMessageShow: onBottomMessageShow,
    onBottomMessageHide: onBottomMessageHide,
    onMessageFormSubmit: onMessageFormSubmit
  };
};

var ChildSocket = function ChildSocket(props) {
  var sessionToken = props.sessionToken;

  var onMessage = function onMessage(event) {
    var eventJSON = JSON.parse(event);

    if (eventJSON.action === 'new_chat') {
      props.onNewChat && props.onNewChat(eventJSON.data);
    } else if (eventJSON.action === 'edit_chat' || eventJSON.action === 'add_person' || eventJSON.action === 'remove_person') {
      props.onEditChat && props.onEditChat(eventJSON.data);
    } else if (eventJSON.action === 'delete_chat') {
      props.onDeleteChat && props.onDeleteChat(eventJSON.data);
    } else if (eventJSON.action === 'new_message') {
      var _eventJSON$data = eventJSON.data,
          id = _eventJSON$data.id,
          message = _eventJSON$data.message;
      props.onNewMessage && props.onNewMessage(id, message);
    } else if (eventJSON.action === 'edit_message') {
      var _eventJSON$data2 = eventJSON.data,
          _id = _eventJSON$data2.id,
          _message = _eventJSON$data2.message;
      props.onEditMessage && props.onEditMessage(_id, _message);
    } else if (eventJSON.action === 'delete_message') {
      var _eventJSON$data3 = eventJSON.data,
          _id2 = _eventJSON$data3.id,
          _message2 = _eventJSON$data3.message;
      props.onDeleteMessage && props.onDeleteMessage(_id2, _message2);
    } else if (eventJSON.action === 'is_typing') {
      var _eventJSON$data4 = eventJSON.data,
          _id3 = _eventJSON$data4.id,
          person = _eventJSON$data4.person;
      props.onIsTyping && props.onIsTyping(_id3, person);
    }
  };

  if (!sessionToken) return React.createElement("div", null);
  var wsUrl = props.wsUrl ? props.wsUrl : 'wss://api.chatengine.io';
  return React.createElement(WebSocket, {
    url: wsUrl + "/person_v4/?session_token=" + sessionToken,
    reconnect: true,
    reconnectIntervalInMilliSeconds: 3000,
    onOpen: props.onConnect,
    onError: props.onError,
    onMessage: onMessage,
    onClose: function onClose() {
      props.onClose && props.onClose();
      props.onRefresh && props.onRefresh();
    }
  });
};

var getSessionToken = function getSessionToken(host, headers, callback, error) {
  axios.get(host + "/users/me/session/", {
    headers: headers
  }).then(function (response) {
    return callback(response.data.token);
  })["catch"](function () {
    return error();
  });
};

var MultiChatSocket = function MultiChatSocket(props) {
  var didMountRef = useRef(false);

  var _useState = useState(false),
      isHidden = _useState[0],
      setIsHidden = _useState[1];

  var _useState2 = useState(undefined),
      sessionToken = _useState2[0],
      setToken = _useState2[1];

  useEffect(function () {
    if (!didMountRef.current) {
      didMountRef.current = true;
      var host = props.httpUrl ? props.httpUrl : 'https://api.chatengine.io';
      var headers = {
        'Public-Key': props.projectId,
        'User-Name': props.username,
        'User-Secret': props.secret
      };
      getSessionToken(host, headers, function (token) {
        return setToken(token);
      }, function () {
        console.log("Your login credentials were not correct: \n\n              Project ID: " + props.projectId + " \n\n              Username: " + props.username + " \n\n              Secret: " + props.secret + "\n\n              Double check these credentials to make sure they're correct.\n\n              If all three are correct, try resetting the username and secret in the Online Dashboard or Private API.");
        props.onAuthFail && props.onAuthFail();
      });
    }
  }, []);

  function reRender() {
    return _reRender.apply(this, arguments);
  }

  function _reRender() {
    _reRender = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setIsHidden(true);
              setTimeout(function () {
                return setIsHidden(false);
              }, 100);

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _reRender.apply(this, arguments);
  }

  if (isHidden && sessionToken) return React.createElement("div", null);
  return React.createElement(ChildSocket, {
    projectId: props.projectId,
    username: props.username,
    secret: props.secret,
    sessionToken: sessionToken,
    wsUrl: props.wsUrl,
    onRefresh: reRender,
    onConnect: props.onConnect,
    onError: props.onError,
    onClose: props.onClose,
    onNewChat: props.onNewChat,
    onEditChat: props.onEditChat,
    onDeleteChat: props.onDeleteChat,
    onNewMessage: props.onNewMessage,
    onEditMessage: props.onEditMessage,
    onDeleteMessage: props.onDeleteMessage,
    onIsTyping: props.onIsTyping
  });
};

var socketRef = undefined;
var pingIntervalId;
var timeIntervalId;
var pingInterval = 4000;
var minLag = 15 * 1000;
var ChildSocket$1 = function ChildSocket(props) {
  var _useState = useState(Date.now()),
      now = _useState[0],
      setNow = _useState[1];

  var _useState2 = useState(Date.now() + minLag),
      shouldPongBy = _useState2[0],
      setShouldPongBy = _useState2[1];

  var projectId = props.projectId,
      chatId = props.chatId,
      chatAccessKey = props.chatAccessKey;
  useEffect(function () {
    if (now > shouldPongBy) {
      props.onRefresh && props.onRefresh();
      setShouldPongBy(Date.now() + minLag);
    }
  }, [now, shouldPongBy]);
  useEffect(function () {
    return function () {
      clearInterval(pingIntervalId);
      clearInterval(timeIntervalId);
    };
  }, []);

  var onConnect = function onConnect() {
    pingIntervalId = setInterval(function () {
      try {
        socketRef.sendMessage(JSON.stringify('ping'));
      } catch (e) {
        console.log('Ping error', e);
      }
    }, pingInterval);
    timeIntervalId = setInterval(function () {
      return setNow(Date.now());
    }, 1000);
    props.onConnect && props.onConnect();
  };

  var onMessage = function onMessage(event) {
    var eventJSON = JSON.parse(event);

    if (eventJSON.action === 'pong') {
      setShouldPongBy(Date.now() + minLag);
    } else if (eventJSON.action === 'login_error') {
      console.log("Your chat auth credentials were not correct: \n\n                Project ID: " + projectId + " \n\n                Chat ID: " + chatId + " \n\n                Chat Access Key: " + chatAccessKey + "\n\n                Double check these credentials to make sure they're correct.\n\n                If all three are correct, try resetting the username and secret in the Online Dashboard or Private API.");
      props.onAuthFail && props.onAuthFail();
    } else if (eventJSON.action === 'edit_chat' || eventJSON.action === 'add_person' || eventJSON.action === 'remove_person') {
      props.onEditChat && props.onEditChat(eventJSON.data);
    } else if (eventJSON.action === 'delete_chat') {
      props.onDeleteChat && props.onDeleteChat(eventJSON.data);
    } else if (eventJSON.action === 'new_message') {
      var _eventJSON$data = eventJSON.data,
          id = _eventJSON$data.id,
          message = _eventJSON$data.message;
      props.onNewMessage && props.onNewMessage(id, message);
    } else if (eventJSON.action === 'edit_message') {
      var _eventJSON$data2 = eventJSON.data,
          _id = _eventJSON$data2.id,
          _message = _eventJSON$data2.message;
      props.onEditMessage && props.onEditMessage(_id, _message);
    } else if (eventJSON.action === 'delete_message') {
      var _eventJSON$data3 = eventJSON.data,
          _id2 = _eventJSON$data3.id,
          _message2 = _eventJSON$data3.message;
      props.onDeleteMessage && props.onDeleteMessage(_id2, _message2);
    } else if (eventJSON.action === 'is_typing') {
      var _eventJSON$data4 = eventJSON.data,
          _id3 = _eventJSON$data4.id,
          person = _eventJSON$data4.person;
      props.onIsTyping && props.onIsTyping(_id3, person);
    }
  };

  var wsUrl = props.wsUrl ? props.wsUrl : 'wss://api.chatengine.io';
  return React.createElement(WebSocket, {
    url: wsUrl + "/chat/?projectID=" + projectId + "&chatID=" + chatId + "&accessKey=" + chatAccessKey,
    reconnect: true,
    reconnectIntervalInMilliSeconds: 3000,
    childRef: function childRef(ref) {
      return socketRef = ref;
    },
    onOpen: onConnect,
    onError: props.onError,
    onMessage: onMessage,
    onClose: function onClose() {
      props.onClose && props.onClose();
      props.onRefresh && props.onRefresh();
    }
  });
};

var SingleChatSocket = function SingleChatSocket(props) {
  var didMountRef = useRef(false);

  var _useState = useState(false),
      isHidden = _useState[0],
      setIsHidden = _useState[1];

  useEffect(function () {
    if (!didMountRef.current) {
      didMountRef.current = true;
    }
  }, []);

  function reRender() {
    return _reRender.apply(this, arguments);
  }

  function _reRender() {
    _reRender = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setIsHidden(true);
              setTimeout(function () {
                return setIsHidden(false);
              }, 100);

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _reRender.apply(this, arguments);
  }

  if (isHidden) return React.createElement("div", null);
  return React.createElement(ChildSocket$1, {
    projectId: props.projectId,
    chatId: props.chatId,
    chatAccessKey: props.chatAccessKey,
    wsUrl: props.wsUrl,
    onRefresh: reRender,
    onConnect: props.onConnect,
    onAuthFail: props.onAuthFail,
    onError: props.onError,
    onClose: props.onClose,
    onEditChat: props.onEditChat,
    onDeleteChat: props.onDeleteChat,
    onNewMessage: props.onNewMessage,
    onEditMessage: props.onEditMessage,
    onDeleteMessage: props.onDeleteMessage,
    onIsTyping: props.onIsTyping
  });
};

export { Autocomplete, Avatar, Button, ChatAvatars, ChatCard, ChatFeed, ChatForm, ChatHeader, ChatList, ChatSettings, Dot, Dropdown, File, Image, Input, MessageForm, MessageList, MultiChatSocket, MultiChatWindow, OptionsSettings, PeopleSettings, PhotosSettings, RenderTrigger, SingleChatSocket, Spinner, deleteChat, formatDateTime, formatTime, getChat, getChatsBefore, getDateTime, getMessages, getOrCreateChat, getPeopleToInvite, invitePerson, newChat, newMessage, readMessage, removePerson, useMultiChatLogic, useSingleChatLogic };
//# sourceMappingURL=react-chat-engine-advanced.esm.js.map
