/// <reference types="react" />
import { ChatObject, MessageObject, PersonObject } from '../interfaces';
export declare const sortChats: (chats: ChatObject[]) => ChatObject[];
export declare const sortMessages: (messages: MessageObject[]) => MessageObject[];
export declare const useMultiChatLogic: (projectId: string, username: string, secret: string, httpUrl?: string | undefined) => {
    onConnect: () => Promise<void>;
    onAuthFail: () => Promise<void>;
    onGetChats: (chats?: ChatObject[]) => Promise<void>;
    onNewChat: (chat: ChatObject) => Promise<void>;
    onEditChat: (newChat: ChatObject) => Promise<void>;
    onDeleteChat: (oldChat: ChatObject) => Promise<void>;
    onGetMessages: (chatId: number, messages: MessageObject[]) => Promise<void>;
    onNewMessage: (chatId: number, newMessage: MessageObject) => Promise<void>;
    onEditMessage: (chatId: number, newMessage: MessageObject) => Promise<void>;
    onDeleteMessage: (chatId: number, oldMessage: MessageObject) => Promise<void>;
    onIsTyping: (id: number, person: PersonObject) => Promise<void>;
    projectId: string;
    username: string;
    secret: string;
    httpUrl: string | undefined;
    wsUrl: string | undefined;
    chats: ChatObject[];
    setChats: import("react").Dispatch<import("react").SetStateAction<ChatObject[]>>;
    messages: MessageObject[];
    setMessages: import("react").Dispatch<import("react").SetStateAction<MessageObject[]>>;
    peopleToInvite: PersonObject[];
    setPeopleToInvite: import("react").Dispatch<import("react").SetStateAction<PersonObject[]>>;
    activeChatId: number | undefined;
    setActiveChatId: import("react").Dispatch<import("react").SetStateAction<number | undefined>>;
    chat: ChatObject | undefined;
    hasMoreChats: boolean;
    setHasMoreChats: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    hasMoreMessages: boolean;
    setHasMoreMessages: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    isChatFeedAtBottom: boolean;
    setIsChatFeedAtBottom: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    isChatListLoading: boolean;
    setIsChatListLoading: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    isChatFeedLoading: boolean;
    setIsChatFeedLoading: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    isChatSettingsLoading: boolean;
    setIsChatSettingsLoading: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    isMobileChatListOpen: boolean;
    setIsMobileChatListOpen: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    isMobileChatSettingsOpen: boolean;
    setIsMobileChatSettingsOpen: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    onChatFormSubmit: (title: string) => Promise<void>;
    onChatCardClick: (newActiveChatId: number) => Promise<void>;
    onChatLoaderShow: () => Promise<void>;
    onMessageLoaderShow: () => Promise<void>;
    onMessageLoaderHide: () => Promise<void>;
    onBottomMessageShow: () => Promise<void>;
    onBottomMessageHide: () => Promise<void>;
    onMessageFormSubmit: (message: MessageObject) => Promise<void>;
    onInvitePersonClick: (person: PersonObject) => Promise<void>;
    onRemovePersonClick: (person: PersonObject) => Promise<void>;
    onDeleteChatClick: (chat: ChatObject) => Promise<void>;
    onMobileChatListClick: () => Promise<void>;
    onMobileChatSettingsClick: () => Promise<void>;
    onCloseMobileChatSettingsClick: () => Promise<void>;
};
