/// <reference types="react" />
import { ChatObject, MessageObject, PersonObject } from '../interfaces';
export declare const sortChats: (chats: ChatObject[]) => ChatObject[];
export declare const sortMessages: (messages: MessageObject[]) => MessageObject[];
export declare const useSingleChatLogic: (projectId: string, chatId: string, chatAccessKey: string, httpUrl?: string | undefined) => {
    onConnect: () => Promise<void>;
    onAuthFail: () => Promise<void>;
    onEditChat: (chat: ChatObject) => Promise<void>;
    onDeleteChat: () => Promise<void>;
    onGetMessages: (chatId: number, messages: MessageObject[]) => Promise<void>;
    onNewMessage: (chatId: number, newMessage: MessageObject) => Promise<void>;
    onEditMessage: (chatId: number, newMessage: MessageObject) => Promise<void>;
    onDeleteMessage: (chatId: number, oldMessage: MessageObject) => Promise<void>;
    onIsTyping: (id: number, person: PersonObject) => Promise<void>;
    projectId: string;
    chatId: string;
    chatAccessKey: string;
    httpUrl: string | undefined;
    wsUrl: string | undefined;
    activeChatId: number | undefined;
    setActiveChatId: import("react").Dispatch<import("react").SetStateAction<number | undefined>>;
    chat: ChatObject | undefined;
    messages: MessageObject[];
    setMessages: import("react").Dispatch<import("react").SetStateAction<MessageObject[]>>;
    peopleToInvite: PersonObject[];
    setPeopleToInvite: import("react").Dispatch<import("react").SetStateAction<PersonObject[]>>;
    hasMoreChats: boolean;
    setHasMoreChats: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    hasMoreMessages: boolean;
    setHasMoreMessages: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    isChatFeedAtBottom: boolean;
    setIsChatFeedAtBottom: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    isChatFeedLoading: boolean;
    setIsChatFeedLoading: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    onChatCardClick: (activeChatId: number) => Promise<void>;
    onMessageLoaderShow: () => Promise<void>;
    onMessageLoaderHide: () => Promise<void>;
    onBottomMessageShow: () => Promise<void>;
    onBottomMessageHide: () => Promise<void>;
    onMessageFormSubmit: (message: MessageObject) => Promise<void>;
};
